#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ v28 –¥–ª—è LuaObfuscator.com
–ò—â–µ—Ç —Ç–æ—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
"""

import re
import json

class V28Analyzer:
    def __init__(self, lua_code):
        self.lua_code = lua_code
        self.v28_body = self.extract_v28_body()
        
    def extract_v28_body(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ v28"""
        # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é v28 —Å —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        pattern = r'local function v28\(\)(.*?)(?=\n\s*local function|\n\s*return|\Z)'
        match = re.search(pattern, self.lua_code, re.DOTALL)
        
        if match:
            return match.group(1)
        return None
    
    def find_return_statement(self):
        """–ò—â–µ—Ç return statement –≤ —Ñ—É–Ω–∫—Ü–∏–∏ v28"""
        if not self.v28_body:
            return None
            
        # v28 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç v59, –ø–æ—ç—Ç–æ–º—É –∏—â–µ–º return v59
        return_pattern = r'return\s+(v\d+);?'
        match = re.search(return_pattern, self.v28_body)
        
        if match:
            return_var = match.group(1)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω return statement: return {return_var}")
            return return_var
        
        print("‚ùå Return statement –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ v28")
        return None
    
    def analyze_v59_structure(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É v59 = {v56,v57,nil,v58}"""
        if not self.v28_body:
            return None
            
        # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ v59
        v59_pattern = r'local (v\d+) = \(function\(\)\s*return \{([^}]+)\};\s*end\)\(\);'
        match = re.search(v59_pattern, self.v28_body)
        
        if match:
            var_name = match.group(1)
            structure = match.group(2)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ {var_name}: {{{structure}}}")
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            components = [comp.strip() for comp in structure.split(',')]
            return {
                'variable': var_name,
                'components': components,
                'structure': structure
            }
        
        print("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ v59 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    def find_v54_function(self):
        """–ò—â–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é v54"""
        if not self.v28_body:
            return None
            
        # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ v54 (—ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç v93-v100)
        v54_pattern = r'local (v\d+) = \(function\(\)\s*return function\(([^)]+)\)(.*?)return ([^;]+);'
        match = re.search(v54_pattern, self.v28_body, re.DOTALL)
        
        if match:
            var_name = match.group(1)
            params = match.group(2)
            body = match.group(3)
            return_stmt = match.group(4)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {var_name}")
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            print(f"   Return: {return_stmt}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            return_vars = [var.strip() for var in return_stmt.split(',')]
            
            return {
                'variable': var_name,
                'parameters': params.split(','),
                'return_variables': return_vars,
                'body': body
            }
        
        print("‚ùå –§—É–Ω–∫—Ü–∏—è v54 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    def trace_data_flow(self):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –≤ v28"""
        print("\nüîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ v28:")
        
        # 1. –ù–∞–π—Ç–∏ v54 (—Ñ—É–Ω–∫—Ü–∏—è —Å v93-v100)
        v54_info = self.find_v54_function()
        
        # 2. –ù–∞–π—Ç–∏ v59 (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        v59_info = self.analyze_v59_structure()
        
        # 3. –ù–∞–π—Ç–∏ return statement
        return_var = self.find_return_statement()
        
        # 4. –ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ v54 –≤ —Ü–∏–∫–ª–µ
        v54_usage = self.find_v54_usage()
        
        return {
            'v54_function': v54_info,
            'v59_structure': v59_info,
            'return_variable': return_var,
            'v54_usage': v54_usage
        }
    
    def find_v54_usage(self):
        """–ò—â–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ v54 –≤ —Ü–∏–∫–ª–µ"""
        if not self.v28_body:
            return None
            
        # –ò—â–µ–º –≤—ã–∑–æ–≤ v54 –≤ —Ü–∏–∫–ª–µ for
        usage_pattern = r'for\s+(v\d+)\s*=\s*[^,]+,\s*(v\d+)\s+do.*?=\s*\(function\(\)\s*return\s+(v\d+)\([^)]+\);.*?end\)\(\);'
        match = re.search(usage_pattern, self.v28_body, re.DOTALL)
        
        if match:
            loop_var = match.group(1)
            limit_var = match.group(2)
            func_call = match.group(3)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ü–∏–∫–ª–µ:")
            print(f"   –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–∏–∫–ª–∞: {loop_var}")
            print(f"   –õ–∏–º–∏—Ç —Ü–∏–∫–ª–∞: {limit_var}")
            print(f"   –í—ã–∑—ã–≤–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {func_call}")
            
            return {
                'loop_variable': loop_var,
                'limit_variable': limit_var,
                'function_call': func_call
            }
        
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ v54 –≤ —Ü–∏–∫–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None
    
    def extract_string_table_operations(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π —Å—Ç—Ä–æ–∫"""
        if not self.v28_body:
            return []
            
        # –ò—â–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å v61 (—Ç–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç)
        string_ops = []
        
        # –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–∏–ø–∞ v61[...] = ...
        v61_pattern = r'v61\[([^\]]+)\]\s*=\s*([^;]+);'
        matches = re.findall(v61_pattern, self.v28_body)
        
        for index, value in matches:
            string_ops.append({
                'index': index,
                'value': value,
                'type': 'assignment'
            })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(string_ops)} –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π —Å—Ç—Ä–æ–∫")
        return string_ops
    
    def generate_debug_extraction_code(self, analysis_result):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        
        debug_code = '''-- –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ v28
-- –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ü–ï–†–ï–î —Å—Ç—Ä–æ–∫–æ–π return v15(...)

-- –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º v28
local original_v28 = v28
local function enhanced_debug_v28()
    print("=== –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –û–¢–õ–ê–î–ö–ê V28 ===")
    
    -- –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    local result = original_v28()
    
    print("–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ v28:", type(result))
    
    if type(result) == "table" then
        print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ v28:")
        for i, component in ipairs(result) do
            print(f"  [{i}] —Ç–∏–ø:", type(component))
            
            if type(component) == "table" then
                print(f"    –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {#component}")
                -- –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                for j = 1, math.min(#component, 3) do
                    local elem = component[j]
                    if type(elem) == "table" then
                        print(f"      [{j}] —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–æ–º {#elem}")
                        if #elem > 0 then
                            print(f"        –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {elem[1]} (—Ç–∏–ø: {type(elem[1])})")
                        end
                    else
                        print(f"      [{j}] = {elem} (—Ç–∏–ø: {type(elem)})")
                    end
                end
                if #component > 3 then
                    print(f"    ... –∏ –µ—â—ë {#component - 3} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                end
            elseif type(component) == "function" then
                print("    –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å")
                local success, func_result = pcall(component)
                if success then
                    print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞: {func_result} (—Ç–∏–ø: {type(func_result)})")
                else
                    print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ: {func_result}")
                end
            else
                print(f"    –ó–Ω–∞—á–µ–Ω–∏–µ: {component}")
            end
        end
    end
    
    print("=== –ö–û–ù–ï–¶ –†–ê–°–®–ò–†–ï–ù–ù–û–ô –û–¢–õ–ê–î–ö–ò V28 ===")
    return result
end

-- –ó–∞–º–µ–Ω—è–µ–º v28
v28 = enhanced_debug_v28

-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ—Ç–ª–∞–¥–∫–∞ v29 –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
local original_v29 = v29
v29 = function(vm_data, env, ...)
    print("=== –û–¢–õ–ê–î–ö–ê V29 (–í–´–ü–û–õ–ù–ï–ù–ò–ï –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –ú–ê–®–ò–ù–´) ===")
    print("VM –¥–∞–Ω–Ω—ã–µ —Ç–∏–ø:", type(vm_data))
    
    if type(vm_data) == "table" and #vm_data >= 1 then
        local instructions = vm_data[1]  -- –û–±—ã—á–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        if type(instructions) == "table" then
            print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:", #instructions)
            
            -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            for i = 1, math.min(#instructions, 5) do
                local instr = instructions[i]
                if type(instr) == "table" then
                    print(f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {i}: {table.concat(instr, ', ')}")
                else
                    print(f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {i}: {instr}")
                end
            end
        end
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–Ω—Å—Ç–∞–Ω—Ç (–æ–±—ã—á–Ω–æ –≤–æ –≤—Ç–æ—Ä–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ)
        if #vm_data >= 2 then
            local constants = vm_data[2]
            if type(constants) == "table" then
                print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç:", #constants)
                for i = 1, math.min(#constants, 10) do
                    local const = constants[i]
                    print(f"–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ {i}: {const} (—Ç–∏–ø: {type(const)})")
                end
            end
        end
    end
    
    local result = original_v29(vm_data, env, ...)
    print("=== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò V29 ===")
    return result
end

print("üîß –£–ª—É—á—à–µ–Ω–Ω—ã–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ö—É–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

'''
        
        return debug_code
    
    def full_analysis(self):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ v28"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É–Ω–∫—Ü–∏–∏ v28...")
        
        if not self.v28_body:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è v28 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        
        print(f"üìè –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏ v28: {len(self.v28_body)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data_flow = self.trace_data_flow()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
        string_ops = self.extract_string_table_operations()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –∫–æ–¥–∞
        debug_code = self.generate_debug_extraction_code(data_flow)
        
        result = {
            'v28_found': True,
            'v28_body_size': len(self.v28_body),
            'data_flow_analysis': data_flow,
            'string_operations': string_ops,
            'debug_extraction_code': debug_code,
            'analysis_summary': {
                'has_v54_function': data_flow['v54_function'] is not None,
                'has_v59_structure': data_flow['v59_structure'] is not None,
                'has_return_statement': data_flow['return_variable'] is not None,
                'string_operations_count': len(string_ops)
            }
        }
        
        return result

def main():
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    try:
        with open('your_original_script.lua', 'r', encoding='utf-8') as f:
            lua_code = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª your_original_script.lua –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    analyzer = V28Analyzer(lua_code)
    result = analyzer.full_analysis()
    
    if result:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open('v28_detailed_analysis.json', 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –∫–æ–¥
        with open('enhanced_debug_injection.lua', 'w', encoding='utf-8') as f:
            f.write(result['debug_extraction_code'])
        
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê V28")
        print("="*60)
        
        summary = result['analysis_summary']
        print(f"–§—É–Ω–∫—Ü–∏—è v54 –Ω–∞–π–¥–µ–Ω–∞: {'‚úÖ' if summary['has_v54_function'] else '‚ùå'}")
        print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ v59 –Ω–∞–π–¥–µ–Ω–∞: {'‚úÖ' if summary['has_v59_structure'] else '‚ùå'}")
        print(f"Return statement –Ω–∞–π–¥–µ–Ω: {'‚úÖ' if summary['has_return_statement'] else '‚ùå'}")
        print(f"–û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏: {summary['string_operations_count']}")
        
        print(f"\nüìÑ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:")
        print(f"  ‚Ä¢ v28_detailed_analysis.json - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        print(f"  ‚Ä¢ enhanced_debug_injection.lua - —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –∫–æ–¥")
        
        if result['data_flow_analysis']['v54_function']:
            v54 = result['data_flow_analysis']['v54_function']
            print(f"\nüîß –ù–∞–π–¥–µ–Ω–∞ –∫–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è {v54['variable']}:")
            print(f"  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {', '.join(v54['return_variables'])}")
            
            print(f"\nüí° –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:")
            print(f"  1. –í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –∏–∑ enhanced_debug_injection.lua –≤ –Ω–∞—á–∞–ª–æ —Å–∫—Ä–∏–ø—Ç–∞")
            print(f"  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç")
            print(f"  3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()