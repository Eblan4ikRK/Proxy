-- –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ v28
-- –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ü–ï–†–ï–î —Å—Ç—Ä–æ–∫–æ–π return v15(...)

-- –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º v28
local original_v28 = v28
local function enhanced_debug_v28()
    print("=== –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –û–¢–õ–ê–î–ö–ê V28 ===")
    
    -- –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    local result = original_v28()
    
    print("–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ v28:", type(result))
    
    if type(result) == "table" then
        print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ v28:")
        for i, component in ipairs(result) do
            print(f"  [{i}] —Ç–∏–ø:", type(component))
            
            if type(component) == "table" then
                print(f"    –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {#component}")
                -- –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                for j = 1, math.min(#component, 3) do
                    local elem = component[j]
                    if type(elem) == "table" then
                        print(f"      [{j}] —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–æ–º {#elem}")
                        if #elem > 0 then
                            print(f"        –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {elem[1]} (—Ç–∏–ø: {type(elem[1])})")
                        end
                    else
                        print(f"      [{j}] = {elem} (—Ç–∏–ø: {type(elem)})")
                    end
                end
                if #component > 3 then
                    print(f"    ... –∏ –µ—â—ë {#component - 3} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                end
            elseif type(component) == "function" then
                print("    –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å")
                local success, func_result = pcall(component)
                if success then
                    print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞: {func_result} (—Ç–∏–ø: {type(func_result)})")
                else
                    print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ: {func_result}")
                end
            else
                print(f"    –ó–Ω–∞—á–µ–Ω–∏–µ: {component}")
            end
        end
    end
    
    print("=== –ö–û–ù–ï–¶ –†–ê–°–®–ò–†–ï–ù–ù–û–ô –û–¢–õ–ê–î–ö–ò V28 ===")
    return result
end

-- –ó–∞–º–µ–Ω—è–µ–º v28
v28 = enhanced_debug_v28

-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ—Ç–ª–∞–¥–∫–∞ v29 –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
local original_v29 = v29
v29 = function(vm_data, env, ...)
    print("=== –û–¢–õ–ê–î–ö–ê V29 (–í–´–ü–û–õ–ù–ï–ù–ò–ï –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –ú–ê–®–ò–ù–´) ===")
    print("VM –¥–∞–Ω–Ω—ã–µ —Ç–∏–ø:", type(vm_data))
    
    if type(vm_data) == "table" and #vm_data >= 1 then
        local instructions = vm_data[1]  -- –û–±—ã—á–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        if type(instructions) == "table" then
            print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:", #instructions)
            
            -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            for i = 1, math.min(#instructions, 5) do
                local instr = instructions[i]
                if type(instr) == "table" then
                    print(f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {i}: {table.concat(instr, ', ')}")
                else
                    print(f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {i}: {instr}")
                end
            end
        end
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–Ω—Å—Ç–∞–Ω—Ç (–æ–±—ã—á–Ω–æ –≤–æ –≤—Ç–æ—Ä–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ)
        if #vm_data >= 2 then
            local constants = vm_data[2]
            if type(constants) == "table" then
                print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç:", #constants)
                for i = 1, math.min(#constants, 10) do
                    local const = constants[i]
                    print(f"–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ {i}: {const} (—Ç–∏–ø: {type(const)})")
                end
            end
        end
    end
    
    local result = original_v29(vm_data, env, ...)
    print("=== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò V29 ===")
    return result
end

print("üîß –£–ª—É—á—à–µ–Ω–Ω—ã–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ö—É–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

