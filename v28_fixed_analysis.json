{
  "v28_found": true,
  "v28_body_size": 6621,
  "v54_function": {
    "variable": "v54",
    "parameters": [
      "v93",
      "v94",
      "v95",
      "v96",
      "v97",
      "v98",
      "v99",
      "v100"
    ],
    "return_variables": [
      "v93",
      "v94",
      "v95",
      "v96",
      "v97",
      "v98",
      "v99",
      "v100"
    ],
    "body": "\n\t\t\t\tlocal v93 = (function()\n\t\t\t\t\treturn 1763 - (454 + 1309);\n\t\t\t\tend)();\n\t\t\t\tlocal v94 = (function()\n\t\t\t\t\treturn;\n\t\t\t\tend)();\n\t\t\t\tlocal v95 = (function()\n\t\t\t\t\treturn;\n\t\t\t\tend)();\n\t\t\t\twhile true do\n\t\t\t\t\tif (v93 == #\" \") then\n\t\t\t\t\t\tif (v94 == #\"[\") then\n\t\t\t\t\t\t\tv95 = (function()\n\t\t\t\t\t\t\t\treturn v96() ~= 0;\n\t\t\t\t\t\t\tend)();\n\t\t\t\t\t\telseif (v94 == 2) then\n\t\t\t\t\t\t\tv95 = (function()\n\t\t\t\t\t\t\t\treturn v97();\n\t\t\t\t\t\t\tend)();\n\t\t\t\t\t\telseif (v94 == #\"-19\") then\n\t\t\t\t\t\t\tv95 = (function()\n\t\t\t\t\t\t\t\treturn v98();\n\t\t\t\t\t\t\tend)();\n\t\t\t\t\t\tend\n\t\t\t\t\t\tv99[v100] = (function()\n\t\t\t\t\t\t\treturn v95;\n\t\t\t\t\t\tend)();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tend\n\t\t\t\t\tif (v93 ~= 0) then\n\t\t\t\t\telse\n\t\t\t\t\t\tlocal v118 = (function()\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\tend)();\n\t\t\t\t\t\twhile true do\n\t\t\t\t\t\t\tif (v118 ~= 1) then\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tv93 = (function()\n\t\t\t\t\t\t\t\t\treturn #\".\";\n\t\t\t\t\t\t\t\tend)();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tif (v118 == (0 + 0)) then\n\t\t\t\t\t\t\t\tv94 = (function()\n\t\t\t\t\t\t\t\t\treturn v96();\n\t\t\t\t\t\t\t\tend)();\n\t\t\t\t\t\t\t\tv95 = (function()\n\t\t\t\t\t\t\t\t\treturn nil;\n\t\t\t\t\t\t\t\tend)();\n\t\t\t\t\t\t\t\tv118 = (function()\n\t\t\t\t\t\t\t\t\treturn 1 - 0;\n\t\t\t\t\t\t\t\tend)();\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t"
  },
  "v93_v100_assignments": {
    "v93": "1763 - (454 + 1309)"
  },
  "v59_structure": {
    "variable": "v59",
    "components": [
      "v56",
      "v57",
      "nil",
      "v58"
    ],
    "structure": "v56,v57,nil,v58"
  },
  "return_variable": "v95",
  "operations": [
    {
      "type": "for_loop",
      "variable": "v71",
      "start": "#\">\"",
      "end": "v60",
      "body": "FlatIdent_60EA1, Type, Cons, v21, v24, v25, v61, v71 = (function()\n\t\t\t\treturn v54(FlatIdent_60EA1, Type, Cons, v21, v24, v25, v61, v71);"
    }
  ],
  "constants": [],
  "extraction_script": "-- RUNTIME EXTRACTION SCRIPT –¥–ª—è LuaObfuscator.com\n-- –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ü–ï–†–ï–î –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π return v15(...)\n\nprint(\"üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...\")\n\n-- –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é v28\nlocal original_v28 = v28\nlocal extracted_data = {}\n\nlocal function debug_v28()\n    print(\"=== –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó V28 ===\")\n    \n    -- –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é\n    local vm_structure = original_v28()\n    \n    print(\"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ v28:\", type(vm_structure))\n    \n    if type(vm_structure) == \"table\" then\n        print(\"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã VM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:\")\n        \n        for i = 1, #vm_structure do\n            local component = vm_structure[i]\n            print(f\"  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç [{i}]: {type(component)}\")\n            \n            if type(component) == \"table\" then\n                print(f\"    –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {#component}\")\n                \n                -- –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π\n                if i == 1 and #component > 0 then\n                    print(\"    –ò–ù–°–¢–†–£–ö–¶–ò–ò –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –ú–ê–®–ò–ù–´:\")\n                    for j = 1, math.min(#component, 10) do\n                        local instr = component[j]\n                        if type(instr) == \"table\" then\n                            local instr_str = \"\"\n                            for k = 1, #instr do\n                                instr_str = instr_str .. tostring(instr[k]) .. \" \"\n                            end\n                            print(f\"      –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {j}: {instr_str}\")\n                        else\n                            print(f\"      –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {j}: {instr}\")\n                        end\n                    end\n                    if #component > 10 then\n                        print(f\"      ... –µ—â—ë {#component - 10} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π\")\n                    end\n                end\n                \n                -- –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç  \n                if i == 2 and #component > 0 then\n                    print(\"    –ö–û–ù–°–¢–ê–ù–¢–´:\")\n                    for j = 1, math.min(#component, 20) do\n                        local const = component[j]\n                        print(f\"      –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ {j}: {const} (—Ç–∏–ø: {type(const)})\")\n                        \n                        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã\n                        if type(const) == \"string\" then\n                            table.insert(extracted_data, {\n                                type = \"string_constant\",\n                                index = j,\n                                value = const\n                            })\n                        end\n                    end\n                    if #component > 20 then\n                        print(f\"      ... –µ—â—ë {#component - 20} –∫–æ–Ω—Å—Ç–∞–Ω—Ç\")\n                    end\n                end\n                \n                -- –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–π\n                if i == 4 and #component > 0 then\n                    print(\"    –§–£–ù–ö–¶–ò–ò:\")\n                    for j = 1, math.min(#component, 5) do\n                        local func = component[j]\n                        print(f\"      –§—É–Ω–∫—Ü–∏—è {j}: {type(func)}\")\n                    end\n                end\n            end\n        end\n    end\n    \n    print(\"=== –ö–û–ù–ï–¶ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ò–ó V28 ===\")\n    return vm_structure\nend\n\n-- –ó–∞–º–µ–Ω—è–µ–º v28\nv28 = debug_v28\n\n-- –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º v29 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\nlocal original_v29 = v29\nv29 = function(vm_data, env, ...)\n    print(\"=== –í–´–ü–û–õ–ù–ï–ù–ò–ï –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –ú–ê–®–ò–ù–´ ===\")\n    \n    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º\n    if type(vm_data) == \"table\" and #vm_data >= 2 then\n        local constants = vm_data[2]\n        if type(constants) == \"table\" then\n            print(\"–°–¢–†–û–ö–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –ù–ê–ô–î–ï–ù–´:\")\n            for i = 1, #constants do\n                local const = constants[i]\n                if type(const) == \"string\" and #const > 0 then\n                    print(f\"  [{i}] '{const}'\")\n                end\n            end\n        end\n    end\n    \n    -- –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥\n    local result = original_v29(vm_data, env, ...)\n    \n    print(\"=== –í–ò–†–¢–£–ê–õ–¨–ù–ê–Ø –ú–ê–®–ò–ù–ê –ó–ê–í–ï–†–®–ï–ù–ê ===\")\n    return result\nend\n\n-- –í—ã–≤–æ–¥–∏–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\nprint(\"\\nüìä –°–û–ë–†–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:\")\nfor i, data in ipairs(extracted_data) do\n    if data.type == \"string_constant\" then\n        print(f\"  –°—Ç—Ä–æ–∫–∞ {data.index}: '{data.value}'\")\n    end\nend\n\nprint(\"\\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å –æ—Ç–ª–∞–¥–∫–æ–π...\")\n",
  "analysis_summary": {
    "has_v54_function": true,
    "has_v59_structure": true,
    "has_return_statement": true,
    "v93_v100_count": 1,
    "operations_count": 1,
    "constants_count": 0
  }
}