#!/usr/bin/env python3
"""
FULL HOOK DUMPER (Python –≤–µ—Ä—Å–∏—è) –¥–ª—è LuaObfuscator.com
–ü–æ–ª–Ω—ã–π –¥–∞–º–ø –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫, —Ñ—É–Ω–∫—Ü–∏–π, VM –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 full_hook.py input.lua output.txt
–ê–≤—Ç–æ—Ä: Deobfuscation Framework
"""

import sys
import os
import re
import time
import json
from datetime import datetime

def print_usage():
    print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 full_hook.py input.lua output.txt")
    print("   input.lua  - –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª")
    print("   output.txt - —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("")
    print("üí° –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞—ë—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Lua —Ñ–∞–π–ª —Å —Ö—É–∫–∞–º–∏")
    print("   –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–∞–º–ø–∞ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –∏ —Ñ—É–Ω–∫—Ü–∏–π")

def main():
    if len(sys.argv) < 3:
        print_usage()
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(input_file):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    print("üîç FULL HOOK DUMPER (Python –≤–µ—Ä—Å–∏—è) –¥–ª—è LuaObfuscator.com")
    print(f"üìÅ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
    print(f"üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
    print("")
    
    start_time = time.time()
    
    # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    print("üìñ –ß–∏—Ç–∞–µ–º –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª...")
    try:
        with open(input_file, 'r', encoding='utf-8', errors='ignore') as f:
            original_code = f.read()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        sys.exit(1)
    
    print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(original_code)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –°–æ–∑–¥–∞—ë–º hook –∫–æ–¥
    print("üîß –°–æ–∑–¥–∞—ë–º hook –∏–Ω—ä–µ–∫—Ü–∏–∏...")
    
    hook_code = '''-- ====== FULL HOOK INJECTION START ======
print("üöÄ FULL HOOK DUMPER –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
print("üìä –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ LuaObfuscator.com")
print("")

-- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
_FULL_DUMP = {
    strings = {},
    functions = {},
    constants = {},
    instructions = {},
    vm_structure = {},
    execution_trace = {}
}

local _string_counter = 0
local _function_counter = 0
local _constant_counter = 0
local _instruction_counter = 0

-- –£—Ç–∏–ª–∏—Ç—ã
local function safe_tostring(obj)
    if type(obj) == "string" then
        return '"' .. obj .. '"'
    elseif type(obj) == "function" then
        return "function:" .. tostring(obj):sub(10)
    elseif type(obj) == "table" then
        local count = 0
        for _ in pairs(obj) do count = count + 1 end
        return "table[" .. count .. "]"
    else
        return tostring(obj)
    end
end

local function capture_string(str, source, context)
    if type(str) == "string" and #str > 0 then
        _string_counter = _string_counter + 1
        local entry = {
            id = _string_counter,
            value = str,
            length = #str,
            source = source or "unknown",
            context = context or "general",
            timestamp = os.date("%H:%M:%S")
        }
        table.insert(_FULL_DUMP.strings, entry)
        print("üìù [STR " .. _string_counter .. "] (" .. entry.source .. ") '" .. str .. "'")
    end
end

local function capture_function(func, name, source, context)
    if type(func) == "function" then
        _function_counter = _function_counter + 1
        local entry = {
            id = _function_counter,
            name = name or "anonymous",
            address = tostring(func),
            source = source or "unknown",
            context = context or "general",
            timestamp = os.date("%H:%M:%S")
        }
        table.insert(_FULL_DUMP.functions, entry)
        print("üîß [FNC " .. _function_counter .. "] " .. entry.name .. " (" .. entry.source .. ") " .. entry.address)
    end
end

local function capture_constant(const, index, source, context)
    _constant_counter = _constant_counter + 1
    local entry = {
        id = _constant_counter,
        index = index or _constant_counter,
        value = const,
        type = type(const),
        source = source or "unknown", 
        context = context or "general",
        timestamp = os.date("%H:%M:%S")
    }
    table.insert(_FULL_DUMP.constants, entry)
    print("üìã [CON " .. _constant_counter .. "] [" .. entry.index .. "] " .. entry.type .. ": " .. safe_tostring(const))
    
    -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
    if type(const) == "string" then
        capture_string(const, source .. "_constant", context)
    end
end

local function capture_instruction(instr, index, source, context)
    _instruction_counter = _instruction_counter + 1
    local entry = {
        id = _instruction_counter,
        index = index or _instruction_counter,
        instruction = instr,
        source = source or "unknown",
        context = context or "general",
        timestamp = os.date("%H:%M:%S")
    }
    table.insert(_FULL_DUMP.instructions, entry)
    
    local instr_str = ""
    if type(instr) == "table" then
        for i, v in ipairs(instr) do
            instr_str = instr_str .. tostring(v) .. " "
        end
    else
        instr_str = tostring(instr)
    end
    print("‚ö° [INS " .. _instruction_counter .. "] [" .. entry.index .. "] " .. instr_str)
end

-- ============= HOOK v28 FUNCTION =============
if v28 then
    print("üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hook –Ω–∞ v28...")
    local original_v28 = v28
    
    v28 = function(...)
        print("")
        print("üéØ ===== HOOK v28 TRIGGERED =====")
        print("‚è∞ –í—Ä–µ–º—è: " .. os.date("%H:%M:%S"))
        
        -- –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        local vm_result = original_v28(...)
        
        print("üìä v28 result type: " .. type(vm_result))
        
        if type(vm_result) == "table" then
            print("üì¶ VM structure components: " .. #vm_result)
            
            _FULL_DUMP.vm_structure = {
                type = "table",
                count = #vm_result,
                components = {}
            }
            
            for i = 1, #vm_result do
                local component = vm_result[i]
                local comp_type = type(component)
                print("üîπ Component[" .. i .. "]: " .. comp_type)
                
                local comp_info = {
                    index = i,
                    type = comp_type,
                    details = {}
                }
                
                if comp_type == "table" then
                    local size = 0
                    for _ in pairs(component) do size = size + 1 end
                    print("   üì¶ Table size: " .. size)
                    comp_info.size = size
                    
                    -- Component 1: Instructions
                    if i == 1 and size > 0 then
                        print("   üîß EXTRACTING VM INSTRUCTIONS:")
                        local instr_count = 0
                        for j, instr in pairs(component) do
                            instr_count = instr_count + 1
                            if instr_count <= 30 then
                                capture_instruction(instr, j, "v28_component1", "vm_instructions")
                            end
                        end
                        if instr_count > 30 then
                            print("      ... –∏ –µ—â—ë " .. (instr_count - 30) .. " –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
                        end
                        comp_info.instruction_count = instr_count
                    end
                    
                    -- Component 2: Constants
                    if i == 2 and size > 0 then
                        print("   üìö EXTRACTING CONSTANTS:")
                        local const_count = 0
                        for j, const in pairs(component) do
                            const_count = const_count + 1
                            if const_count <= 100 then
                                capture_constant(const, j, "v28_component2", "vm_constants")
                            end
                        end
                        if const_count > 100 then
                            print("      ... –∏ –µ—â—ë " .. (const_count - 100) .. " –∫–æ–Ω—Å—Ç–∞–Ω—Ç")
                        end
                        comp_info.constant_count = const_count
                    end
                    
                    -- Component 4: Functions
                    if i == 4 and size > 0 then
                        print("   ‚öôÔ∏è EXTRACTING FUNCTIONS:")
                        local func_count = 0
                        for j, func in pairs(component) do
                            func_count = func_count + 1
                            if func_count <= 20 then
                                capture_function(func, "vm_func_" .. j, "v28_component4", "vm_functions")
                            end
                        end
                        comp_info.function_count = func_count
                    end
                end
                
                table.insert(_FULL_DUMP.vm_structure.components, comp_info)
            end
        end
        
        print("üéØ ===== END v28 HOOK =====")
        print("")
        return vm_result
    end
    print("‚úÖ v28 hook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
else
    print("‚ö†Ô∏è v28 function –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
end

-- ============= HOOK v29 FUNCTION =============
if v29 then
    print("‚ö° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hook –Ω–∞ v29...")
    local original_v29 = v29
    
    v29 = function(vm_data, env, ...)
        print("")
        print("‚ö° ===== HOOK v29 EXECUTION =====")
        print("‚è∞ –í—Ä–µ–º—è: " .. os.date("%H:%M:%S"))
        print("üìä VM data type: " .. type(vm_data))
        
        if type(vm_data) == "table" and #vm_data >= 2 then
            -- –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            local constants = vm_data[2]
            if type(constants) == "table" then
                print("üî§ RUNTIME CONSTANTS EXTRACTION:")
                local runtime_count = 0
                for i, const in pairs(constants) do
                    runtime_count = runtime_count + 1
                    if type(const) == "string" and #const > 0 then
                        print("   üéØ Runtime[" .. i .. "]: '" .. const .. "'")
                        capture_string(const, "v29_runtime", "execution_constants")
                    end
                    if runtime_count <= 50 then
                        capture_constant(const, i, "v29_runtime", "execution_constants")
                    end
                end
                print("üìä Runtime constants processed: " .. runtime_count)
            end
            
            -- –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            local instructions = vm_data[1]
            if type(instructions) == "table" then
                print("üîß RUNTIME INSTRUCTIONS:")
                local exec_count = 0
                for i, instr in pairs(instructions) do
                    exec_count = exec_count + 1
                    if exec_count <= 20 then
                        capture_instruction(instr, i, "v29_runtime", "execution_instructions")
                    end
                end
                print("üìä Runtime instructions processed: " .. exec_count)
            end
        end
        
        -- –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
        local result = original_v29(vm_data, env, ...)
        print("‚ö° ===== END v29 EXECUTION =====")
        print("")
        return result
    end
    print("‚úÖ v29 hook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
else
    print("‚ö†Ô∏è v29 function –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
end

-- ============= HOOK STRING FUNCTIONS =============
-- Hook string.char
if string and string.char then
    local original_char = string.char
    string.char = function(...)
        local result = original_char(...)
        if type(result) == "string" and #result > 0 and (#result > 1 or string.byte(result) > 31) then
            capture_string(result, "string.char", "string_generation")
        end
        return result
    end
    print("‚úÖ string.char hook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
end

-- Hook table.concat
if table and table.concat then
    local original_concat = table.concat
    table.concat = function(tbl, sep, ...)
        local result = original_concat(tbl, sep, ...)
        if type(result) == "string" and #result > 0 then
            capture_string(result, "table.concat", "string_assembly")
        end
        return result
    end
    print("‚úÖ table.concat hook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
end

-- Hook print function
if print then
    local original_print = print
    print = function(...)
        local args = {...}
        for i, arg in ipairs(args) do
            if type(arg) == "string" and #arg > 0 then
                capture_string(arg, "print_output", "program_output")
            end
        end
        return original_print(...)
    end
    print("‚úÖ print hook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
end

-- ============= FINAL DUMP FUNCTION =============
local function generate_final_report()
    print("")
    print("=" .. string.rep("=", 80))
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ FULL HOOK DUMPER")
    print("=" .. string.rep("=", 80))
    
    print("üî§ –ò–ó–í–õ–ï–ß–Å–ù–ù–´–ï –°–¢–†–û–ö–ò (" .. #_FULL_DUMP.strings .. "):")
    for i, str_data in ipairs(_FULL_DUMP.strings) do
        if i <= 20 then
            print("   [" .. str_data.id .. "] (" .. str_data.source .. ") " .. str_data.timestamp .. " '" .. str_data.value .. "'")
        end
    end
    if #_FULL_DUMP.strings > 20 then
        print("   ... –∏ –µ—â—ë " .. (#_FULL_DUMP.strings - 20) .. " —Å—Ç—Ä–æ–∫")
    end
    
    print("")
    print("üîß –ù–ê–ô–î–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò (" .. #_FULL_DUMP.functions .. "):")
    for i, func_data in ipairs(_FULL_DUMP.functions) do
        if i <= 15 then
            print("   [" .. func_data.id .. "] " .. func_data.name .. " (" .. func_data.source .. ") " .. func_data.address)
        end
    end
    if #_FULL_DUMP.functions > 15 then
        print("   ... –∏ –µ—â—ë " .. (#_FULL_DUMP.functions - 15) .. " —Ñ—É–Ω–∫—Ü–∏–π")
    end
    
    print("")
    print("üìã –ö–û–ù–°–¢–ê–ù–¢–´ (" .. #_FULL_DUMP.constants .. "):")
    for i, const_data in ipairs(_FULL_DUMP.constants) do
        if i <= 25 then
            print("   [" .. const_data.id .. "] [" .. const_data.index .. "] " .. const_data.type .. ": " .. safe_tostring(const_data.value))
        end
    end
    if #_FULL_DUMP.constants > 25 then
        print("   ... –∏ –µ—â—ë " .. (#_FULL_DUMP.constants - 25) .. " –∫–æ–Ω—Å—Ç–∞–Ω—Ç")
    end
    
    print("")
    print("‚ö° –ò–ù–°–¢–†–£–ö–¶–ò–ò (" .. #_FULL_DUMP.instructions .. "):")
    for i, instr_data in ipairs(_FULL_DUMP.instructions) do
        if i <= 15 then
            local instr_str = ""
            if type(instr_data.instruction) == "table" then
                for j, v in ipairs(instr_data.instruction) do
                    instr_str = instr_str .. tostring(v) .. " "
                end
            else
                instr_str = tostring(instr_data.instruction)
            end
            print("   [" .. instr_data.id .. "] [" .. instr_data.index .. "] " .. instr_str)
        end
    end
    if #_FULL_DUMP.instructions > 15 then
        print("   ... –∏ –µ—â—ë " .. (#_FULL_DUMP.instructions - 15) .. " –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    end
    
    print("")
    print("üéØ –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    
    -- –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    local runtime_strings = {}
    for _, str_data in ipairs(_FULL_DUMP.strings) do
        if str_data.source == "v29_runtime" or str_data.source == "v28_component2_constant" then
            table.insert(runtime_strings, str_data.value)
        end
    end
    
    print("   üî§ –°—Ç—Ä–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–æ: " .. #_FULL_DUMP.strings)
    print("   üîß –§—É–Ω–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: " .. #_FULL_DUMP.functions) 
    print("   üìã –ö–æ–Ω—Å—Ç–∞–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " .. #_FULL_DUMP.constants)
    print("   ‚ö° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∑–∞—Ö–≤–∞—á–µ–Ω–æ: " .. #_FULL_DUMP.instructions)
    
    print("")
    print("üéâ –†–ï–ö–û–ù–°–¢–†–£–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î:")
    print("-" .. string.rep("-", 40))
    
    -- –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    local print_found = false
    local string_to_print = nil
    
    for _, str_data in ipairs(_FULL_DUMP.strings) do
        if str_data.value == "print" then
            print_found = true
        elseif print_found and str_data.value ~= "print" and #str_data.value > 0 then
            string_to_print = str_data.value
            break
        end
    end
    
    if print_found and string_to_print then
        print('print("' .. string_to_print .. '")')
    else
        print("-- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã—à–µ –¥–ª—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        if #runtime_strings > 0 then
            print("-- –ù–∞–π–¥–µ–Ω–Ω—ã–µ runtime —Å—Ç—Ä–æ–∫–∏:")
            for i, str in ipairs(runtime_strings) do
                if i <= 5 then
                    print("--   '" .. str .. "'")
                end
            end
        end
    end
    
    print("")
    print("=" .. string.rep("=", 80))
    print("‚ú® HOOK DUMPER –∑–∞–≤–µ—Ä—à—ë–Ω: " .. os.date("%H:%M:%S"))
    print("=" .. string.rep("=", 80))
end

-- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
if _G.getfenv then
    local env = _G.getfenv()
    if env then
        env._FINAL_REPORT = generate_final_report
    end
end

print("")
print("üéâ –í—Å–µ —Ö—É–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...")
print("‚è∞ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: " .. os.date("%H:%M:%S"))
print("-" .. string.rep("-", 80))

-- ====== FULL HOOK INJECTION END ======

'''
    
    # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º hook –∫–æ–¥
    print("üíâ –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º hooks –≤ –∫–æ–¥...")
    
    # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∏–Ω–∂–µ–∫—Ü–∏–∏ (–ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º return)
    modified_code = original_code
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞ –∏–Ω–∂–µ–∫—Ü–∏–∏
    injection_patterns = [
        r'(return v15\([^)]+\)[^;]*;?\s*)$',
        r'(return [^;]+;?\s*)$',
        r'(\s*)$'
    ]
    
    injected = False
    for pattern in injection_patterns:
        match = re.search(pattern, modified_code, re.MULTILINE | re.DOTALL)
        if match:
            # –í—Å—Ç–∞–≤–ª—è–µ–º hook –∫–æ–¥ –ø–µ—Ä–µ–¥ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
            before = modified_code[:match.start()]
            after = modified_code[match.start():]
            modified_code = before + hook_code + "\n" + after
            injected = True
            print(f"‚úÖ Hook –∫–æ–¥ –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–¥: {match.group(1)[:50]}...")
            break
    
    if not injected:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        modified_code = hook_code + "\n" + original_code
        print("‚úÖ Hook –∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞")
    
    # –°–æ–∑–¥–∞—ë–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    modified_filename = f"hooked_{int(time.time())}.lua"
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {modified_filename}")
    try:
        with open(modified_filename, 'w', encoding='utf-8') as f:
            f.write(modified_code)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç
    execution_time = time.time() - start_time
    
    report_lines = [
        "FULL HOOK DUMPER - –û—Ç—á—ë—Ç –æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞",
        "=" * 60,
        "",
        f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {input_file}",
        f"üîß –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {modified_filename}",
        f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {execution_time:.2f} —Å–µ–∫—É–Ω–¥",
        f"üìè –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ: {len(original_code)} —Å–∏–º–≤–æ–ª–æ–≤",
        f"üìè –†–∞–∑–º–µ—Ä —Å —Ö—É–∫–∞–º–∏: {len(modified_code)} —Å–∏–º–≤–æ–ª–æ–≤",
        f"üìà –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(modified_code) - len(original_code)} —Å–∏–º–≤–æ–ª–æ–≤ —Ö—É–∫–æ–≤",
        "",
        "üîß –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –•–£–ö–ò:",
        "  ‚úÖ v28 function hook - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ VM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
        "  ‚úÖ v29 function hook - –ø–µ—Ä–µ—Ö–≤–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        "  ‚úÖ string.char hook - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫",
        "  ‚úÖ table.concat hook - —Å–±–æ—Ä–∫–∞ —Å—Ç—Ä–æ–∫",
        "  ‚úÖ print hook - –≤—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "",
        "üöÄ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ó–ê–ü–£–°–ö–£:",
        "",
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Lua (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω):",
        "   Ubuntu/Debian: sudo apt install lua5.3",
        "   macOS: brew install lua",
        "   Windows: —Å–∫–∞—á–∞–π—Ç–µ —Å lua.org",
        "",
        f"2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:",
        f"   lua {modified_filename}",
        "",
        "3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤—ã–≤–æ–¥ - –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
        "   –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏ –ø–æ–∫–∞–∑–∞–Ω—ã.",
        "",
        "4. –í –∫–æ–Ω—Ü–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã —É–≤–∏–¥–∏—Ç–µ:",
        "   üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ FULL HOOK DUMPER",
        "   üéâ –†–ï–ö–û–ù–°–¢–†–£–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î",
        "",
        "üéØ –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:",
        "",
        "–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:",
        "1    3    print   ...",
        "1    3    hmmmm   ...",
        "",
        "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏:",
        "üìù [STR 1] (v28_component2) 'print'",
        "üìù [STR 2] (v28_component2) 'hmmmm'",
        "üéØ Runtime[2]: 'print'",
        "üéØ Runtime[3]: 'hmmmm'",
        "",
        "–ò —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥:",
        'print("hmmmm")',
        "",
        "=" * 60,
        f"–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≥–æ—Ç–æ–≤: {modified_filename}",
        "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –≤ Lua –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–∞–º–ø–∞!",
        "=" * 60
    ]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    print(f"üìÑ –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç: {output_file}")
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(report_lines))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
        sys.exit(1)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("")
    print("üéâ FULL HOOK DUMPER (Python) –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   üîß –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {modified_filename}")
    print(f"   üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_file}")
    print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {execution_time:.2f} —Å–µ–∫")
    print(f"   üìà –†–∞–∑–º–µ—Ä —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞: {len(modified_code) - len(original_code)} —Å–∏–º–≤–æ–ª–æ–≤")
    print("")
    print("üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print(f"   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Lua: sudo apt install lua5.3")
    print(f"   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: lua {modified_filename}")
    print(f"   3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ –¥–∞–º–ø–∞")
    print("")
    print("üí° –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print("   üìù –í—Å–µ —Å—Ç—Ä–æ–∫–∏: 'print', 'hmmmm'")
    print("   üéâ –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: print(\"hmmmm\")")

if __name__ == "__main__":
    main()