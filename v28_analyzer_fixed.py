#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ v28
"""

import re
import json

class V28AnalyzerFixed:
    def __init__(self, lua_code):
        self.lua_code = lua_code
        self.v28_body = self.extract_v28_body()
        
    def extract_v28_body(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ v28 –ø—Ä–∞–≤–∏–ª—å–Ω–æ"""
        # –ò—â–µ–º –æ—Ç 'local function v28()' –¥–æ 'end' –ø–µ—Ä–µ–¥ 'local function v29'
        pattern = r'local function v28\(\)(.*?)(?=\n\s*end\s*\n\s*local function v29)'
        match = re.search(pattern, self.lua_code, re.DOTALL)
        
        if match:
            body = match.group(1)
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–µ–ª–æ v28: {len(body)} —Å–∏–º–≤–æ–ª–æ–≤")
            return body
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        pattern2 = r'local function v28\(\)(.*?)return v59;'
        match2 = re.search(pattern2, self.lua_code, re.DOTALL)
        
        if match2:
            body = match2.group(1) + "return v59;"
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–µ–ª–æ v28 (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±): {len(body)} —Å–∏–º–≤–æ–ª–æ–≤")
            return body
            
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ v28")
        return None
    
    def find_return_statement(self):
        """–ò—â–µ—Ç return statement –≤ —Ñ—É–Ω–∫—Ü–∏–∏ v28"""
        if not self.v28_body:
            return None
            
        # –ò—â–µ–º 'return v59' –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏
        return_pattern = r'return\s+(v\d+);?\s*$'
        match = re.search(return_pattern, self.v28_body, re.MULTILINE)
        
        if match:
            return_var = match.group(1)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω return statement: return {return_var}")
            return return_var
        
        print("‚ùå Return statement –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ v28")
        return None
    
    def analyze_v59_structure(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É v59 = {v56,v57,nil,v58}"""
        if not self.v28_body:
            return None
            
        # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ v59 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
        v59_pattern = r'local (v\d+) = \(function\(\)\s*return \{([^}]+)\};\s*end\)\(\);'
        match = re.search(v59_pattern, self.v28_body)
        
        if match:
            var_name = match.group(1)
            structure = match.group(2)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ {var_name}: {{{structure}}}")
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            components = [comp.strip() for comp in structure.split(',')]
            return {
                'variable': var_name,
                'components': components,
                'structure': structure
            }
        
        print("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ v59 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    def find_v54_function(self):
        """–ò—â–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é v54 —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ v93-v100"""
        if not self.v28_body:
            return None
            
        # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é v54 —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ v93, v94, v95, v96, v97, v98, v99, v100
        v54_pattern = r'local (v\d+) = \(function\(\)\s*return function\((v\d+, v\d+, v\d+, v\d+, v\d+, v\d+, v\d+, v\d+)\)(.*?)return (v\d+, v\d+, v\d+, v\d+, v\d+, v\d+, v\d+, v\d+);'
        match = re.search(v54_pattern, self.v28_body, re.DOTALL)
        
        if match:
            var_name = match.group(1)
            params = match.group(2)
            body = match.group(3)
            return_stmt = match.group(4)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {var_name}")
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            print(f"   Return: {return_stmt}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            return_vars = [var.strip() for var in return_stmt.split(',')]
            param_vars = [var.strip() for var in params.split(',')]
            
            return {
                'variable': var_name,
                'parameters': param_vars,
                'return_variables': return_vars,
                'body': body
            }
        
        print("‚ùå –§—É–Ω–∫—Ü–∏—è v54 —Å v93-v100 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    def find_v93_v100_assignments(self):
        """–ò—â–µ—Ç –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö v93-v100 –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ v54"""
        if not self.v28_body:
            return {}
            
        assignments = {}
        
        # –ò—â–µ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è —Ç–∏–ø–∞ 'local v93 = ...'
        for i in range(93, 101):  # v93 to v100
            var_name = f"v{i}"
            pattern = rf'local {var_name} = \(function\(\)\s*return ([^;]+);\s*end\)\(\);'
            match = re.search(pattern, self.v28_body)
            
            if match:
                value = match.group(1)
                assignments[var_name] = value
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ: {var_name} = {value}")
        
        print(f"üìù –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(assignments)} –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–π v93-v100")
        return assignments
    
    def find_loops_and_operations(self):
        """–ò—â–µ—Ç —Ü–∏–∫–ª—ã for –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ v28"""
        if not self.v28_body:
            return []
            
        operations = []
        
        # –ò—â–µ–º —Ü–∏–∫–ª—ã for
        for_pattern = r'for (v\d+) = ([^,]+), (v\d+) do(.*?)end'
        matches = re.findall(for_pattern, self.v28_body, re.DOTALL)
        
        for loop_var, start_val, end_var, loop_body in matches:
            operations.append({
                'type': 'for_loop',
                'variable': loop_var,
                'start': start_val,
                'end': end_var,
                'body': loop_body.strip()
            })
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ü–∏–∫–ª for: {loop_var} –æ—Ç {start_val} –¥–æ {end_var}")
        
        return operations
    
    def extract_constant_table_operations(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç (v61)"""
        if not self.v28_body:
            return []
            
        constants = []
        
        # –ò—â–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ v61[index] = value
        v61_pattern = r'v61\[([^\]]+)\] = \(function\(\)\s*return ([^;]+);\s*end\)\(\);'
        matches = re.findall(v61_pattern, self.v28_body)
        
        for index, value in matches:
            constants.append({
                'index': index,
                'value': value,
                'type': 'constant_assignment'
            })
            print(f"‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ v61[{index}] = {value}")
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(constants)} –∫–æ–Ω—Å—Ç–∞–Ω—Ç")
        return constants
    
    def generate_runtime_extraction_script(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        
        script = '''-- RUNTIME EXTRACTION SCRIPT –¥–ª—è LuaObfuscator.com
-- –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ü–ï–†–ï–î –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π return v15(...)

print("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...")

-- –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é v28
local original_v28 = v28
local extracted_data = {}

local function debug_v28()
    print("=== –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó V28 ===")
    
    -- –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    local vm_structure = original_v28()
    
    print("–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ v28:", type(vm_structure))
    
    if type(vm_structure) == "table" then
        print("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã VM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
        
        for i = 1, #vm_structure do
            local component = vm_structure[i]
            print(f"  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç [{i}]: {type(component)}")
            
            if type(component) == "table" then
                print(f"    –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {#component}")
                
                -- –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
                if i == 1 and #component > 0 then
                    print("    –ò–ù–°–¢–†–£–ö–¶–ò–ò –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –ú–ê–®–ò–ù–´:")
                    for j = 1, math.min(#component, 10) do
                        local instr = component[j]
                        if type(instr) == "table" then
                            local instr_str = ""
                            for k = 1, #instr do
                                instr_str = instr_str .. tostring(instr[k]) .. " "
                            end
                            print(f"      –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {j}: {instr_str}")
                        else
                            print(f"      –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {j}: {instr}")
                        end
                    end
                    if #component > 10 then
                        print(f"      ... –µ—â—ë {#component - 10} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
                    end
                end
                
                -- –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç  
                if i == 2 and #component > 0 then
                    print("    –ö–û–ù–°–¢–ê–ù–¢–´:")
                    for j = 1, math.min(#component, 20) do
                        local const = component[j]
                        print(f"      –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ {j}: {const} (—Ç–∏–ø: {type(const)})")
                        
                        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
                        if type(const) == "string" then
                            table.insert(extracted_data, {
                                type = "string_constant",
                                index = j,
                                value = const
                            })
                        end
                    end
                    if #component > 20 then
                        print(f"      ... –µ—â—ë {#component - 20} –∫–æ–Ω—Å—Ç–∞–Ω—Ç")
                    end
                end
                
                -- –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–π
                if i == 4 and #component > 0 then
                    print("    –§–£–ù–ö–¶–ò–ò:")
                    for j = 1, math.min(#component, 5) do
                        local func = component[j]
                        print(f"      –§—É–Ω–∫—Ü–∏—è {j}: {type(func)}")
                    end
                end
            end
        end
    end
    
    print("=== –ö–û–ù–ï–¶ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ò–ó V28 ===")
    return vm_structure
end

-- –ó–∞–º–µ–Ω—è–µ–º v28
v28 = debug_v28

-- –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º v29 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
local original_v29 = v29
v29 = function(vm_data, env, ...)
    print("=== –í–´–ü–û–õ–ù–ï–ù–ò–ï –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –ú–ê–®–ò–ù–´ ===")
    
    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    if type(vm_data) == "table" and #vm_data >= 2 then
        local constants = vm_data[2]
        if type(constants) == "table" then
            print("–°–¢–†–û–ö–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –ù–ê–ô–î–ï–ù–´:")
            for i = 1, #constants do
                local const = constants[i]
                if type(const) == "string" and #const > 0 then
                    print(f"  [{i}] '{const}'")
                end
            end
        end
    end
    
    -- –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
    local result = original_v29(vm_data, env, ...)
    
    print("=== –í–ò–†–¢–£–ê–õ–¨–ù–ê–Ø –ú–ê–®–ò–ù–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")
    return result
end

-- –í—ã–≤–æ–¥–∏–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
print("\\nüìä –°–û–ë–†–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:")
for i, data in ipairs(extracted_data) do
    if data.type == "string_constant" then
        print(f"  –°—Ç—Ä–æ–∫–∞ {data.index}: '{data.value}'")
    end
end

print("\\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å –æ—Ç–ª–∞–¥–∫–æ–π...")
'''
        
        return script
    
    def full_analysis(self):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ v28"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É–Ω–∫—Ü–∏–∏ v28...")
        
        if not self.v28_body:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è v28 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        
        print(f"üìè –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏ v28: {len(self.v28_body)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ v28:")
        
        # 1. –ù–∞–π—Ç–∏ v54 (—Ñ—É–Ω–∫—Ü–∏—è —Å v93-v100)
        v54_info = self.find_v54_function()
        
        # 2. –ù–∞–π—Ç–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è v93-v100
        v93_v100_assignments = self.find_v93_v100_assignments()
        
        # 3. –ù–∞–π—Ç–∏ v59 (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        v59_info = self.analyze_v59_structure()
        
        # 4. –ù–∞–π—Ç–∏ return statement
        return_var = self.find_return_statement()
        
        # 5. –ù–∞–π—Ç–∏ —Ü–∏–∫–ª—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        operations = self.find_loops_and_operations()
        
        # 6. –ù–∞–π—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏
        constants = self.extract_constant_table_operations()
        
        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        extraction_script = self.generate_runtime_extraction_script()
        
        result = {
            'v28_found': True,
            'v28_body_size': len(self.v28_body),
            'v54_function': v54_info,
            'v93_v100_assignments': v93_v100_assignments,
            'v59_structure': v59_info,
            'return_variable': return_var,
            'operations': operations,
            'constants': constants,
            'extraction_script': extraction_script,
            'analysis_summary': {
                'has_v54_function': v54_info is not None,
                'has_v59_structure': v59_info is not None,
                'has_return_statement': return_var is not None,
                'v93_v100_count': len(v93_v100_assignments),
                'operations_count': len(operations),
                'constants_count': len(constants)
            }
        }
        
        return result

def main():
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    try:
        with open('your_original_script.lua', 'r', encoding='utf-8') as f:
            lua_code = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª your_original_script.lua –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    analyzer = V28AnalyzerFixed(lua_code)
    result = analyzer.full_analysis()
    
    if result:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open('v28_fixed_analysis.json', 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        with open('runtime_extraction_script.lua', 'w', encoding='utf-8') as f:
            f.write(result['extraction_script'])
        
        print("\n" + "="*70)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê V28")
        print("="*70)
        
        summary = result['analysis_summary']
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è v28 –Ω–∞–π–¥–µ–Ω–∞ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"üìè –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏: {result['v28_body_size']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üîß –§—É–Ω–∫—Ü–∏—è v54: {'‚úÖ' if summary['has_v54_function'] else '‚ùå'}")
        print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ v59: {'‚úÖ' if summary['has_v59_structure'] else '‚ùå'}")
        print(f"‚Ü©Ô∏è  Return statement: {'‚úÖ' if summary['has_return_statement'] else '‚ùå'}")
        print(f"üî¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ v93-v100: {summary['v93_v100_count']}")
        print(f"üîÑ –û–ø–µ—Ä–∞—Ü–∏–∏/—Ü–∏–∫–ª—ã: {summary['operations_count']}")
        print(f"üìã –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã: {summary['constants_count']}")
        
        if result['v93_v100_assignments']:
            print(f"\nüî¢ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è v93-v100:")
            for var, value in result['v93_v100_assignments'].items():
                print(f"  {var} = {value}")
        
        if result['v59_structure']:
            v59 = result['v59_structure']
            print(f"\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ {v59['variable']}: {{{v59['structure']}}}")
            print(f"  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(v59['components'])}")
        
        print(f"\nüìÑ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:")
        print(f"  ‚Ä¢ v28_fixed_analysis.json - –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        print(f"  ‚Ä¢ runtime_extraction_script.lua - —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏:")
        print(f"  1. –í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –∏–∑ runtime_extraction_script.lua –≤ –Ω–∞—á–∞–ª–æ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞")
        print(f"  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –≤ Lua –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–µ")
        print(f"  3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:")
        print(f"     ‚Ä¢ –°—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç")
        print(f"     ‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã")
        print(f"     ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
        print(f"  4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞")

if __name__ == "__main__":
    main()