#!/usr/bin/env python3
"""
FULL HOOK DUMPER (FIXED) –¥–ª—è LuaObfuscator.com
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–∫—É—Ä—Å–∏–µ–π –≤ print hook

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 full_hook_fixed.py input.lua output.txt
"""

import sys
import os
import re
import time
import json
from datetime import datetime

def main():
    if len(sys.argv) < 3:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 full_hook_fixed.py input.lua output.txt")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    print("üîç FULL HOOK DUMPER (FIXED) –¥–ª—è LuaObfuscator.com")
    print(f"üìÅ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
    print(f"üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
    print("")
    
    # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    with open(input_file, 'r', encoding='utf-8', errors='ignore') as f:
        original_code = f.read()
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π hook –∫–æ–¥ –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
    hook_code = '''-- ====== FULL HOOK INJECTION (FIXED) START ======
-- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π print –°–†–ê–ó–£ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
local original_print = print
local _print_safe = function(...)
    return original_print(...)
end

_print_safe("üöÄ FULL HOOK DUMPER (FIXED) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
_print_safe("üìä –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ LuaObfuscator.com")
_print_safe("")

-- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
_FULL_DUMP = {
    strings = {},
    functions = {},
    constants = {},
    instructions = {},
    vm_structure = {},
    execution_trace = {}
}

local _string_counter = 0
local _function_counter = 0
local _constant_counter = 0
local _instruction_counter = 0

-- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π capture_string –ë–ï–ó –≤—ã–∑–æ–≤–∞ print
local function capture_string_safe(str, source, context)
    if type(str) == "string" and #str > 0 then
        _string_counter = _string_counter + 1
        local entry = {
            id = _string_counter,
            value = str,
            length = #str,
            source = source or "unknown",
            context = context or "general",
            timestamp = os.date("%H:%M:%S")
        }
        table.insert(_FULL_DUMP.strings, entry)
        -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π print
        _print_safe("üìù [STR " .. _string_counter .. "] (" .. entry.source .. ") '" .. str .. "'")
    end
end

-- –£—Ç–∏–ª–∏—Ç—ã
local function safe_tostring(obj)
    if type(obj) == "string" then
        return '"' .. obj .. '"'
    elseif type(obj) == "function" then
        return "function:" .. tostring(obj):sub(10)
    elseif type(obj) == "table" then
        local count = 0
        for _ in pairs(obj) do count = count + 1 end
        return "table[" .. count .. "]"
    else
        return tostring(obj)
    end
end

local function capture_function(func, name, source, context)
    if type(func) == "function" then
        _function_counter = _function_counter + 1
        local entry = {
            id = _function_counter,
            name = name or "anonymous",
            address = tostring(func),
            source = source or "unknown",
            context = context or "general",
            timestamp = os.date("%H:%M:%S")
        }
        table.insert(_FULL_DUMP.functions, entry)
        _print_safe("üîß [FNC " .. _function_counter .. "] " .. entry.name .. " (" .. entry.source .. ") " .. entry.address)
    end
end

local function capture_constant(const, index, source, context)
    _constant_counter = _constant_counter + 1
    local entry = {
        id = _constant_counter,
        index = index or _constant_counter,
        value = const,
        type = type(const),
        source = source or "unknown", 
        context = context or "general",
        timestamp = os.date("%H:%M:%S")
    }
    table.insert(_FULL_DUMP.constants, entry)
    _print_safe("üìã [CON " .. _constant_counter .. "] [" .. entry.index .. "] " .. entry.type .. ": " .. safe_tostring(const))
    
    -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
    if type(const) == "string" then
        capture_string_safe(const, source .. "_constant", context)
    end
end

local function capture_instruction(instr, index, source, context)
    _instruction_counter = _instruction_counter + 1
    local entry = {
        id = _instruction_counter,
        index = index or _instruction_counter,
        instruction = instr,
        source = source or "unknown",
        context = context or "general",
        timestamp = os.date("%H:%M:%S")
    }
    table.insert(_FULL_DUMP.instructions, entry)
    
    local instr_str = ""
    if type(instr) == "table" then
        for i, v in ipairs(instr) do
            instr_str = instr_str .. tostring(v) .. " "
        end
    else
        instr_str = tostring(instr)
    end
    _print_safe("‚ö° [INS " .. _instruction_counter .. "] [" .. entry.index .. "] " .. instr_str)
end

-- ============= HOOK v28 FUNCTION =============
if v28 then
    _print_safe("üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hook –Ω–∞ v28...")
    local original_v28 = v28
    
    v28 = function(...)
        _print_safe("")
        _print_safe("üéØ ===== HOOK v28 TRIGGERED =====")
        _print_safe("‚è∞ –í—Ä–µ–º—è: " .. os.date("%H:%M:%S"))
        
        local vm_result = original_v28(...)
        _print_safe("üìä v28 result type: " .. type(vm_result))
        
        if type(vm_result) == "table" then
            _print_safe("üì¶ VM structure components: " .. #vm_result)
            
            for i = 1, #vm_result do
                local component = vm_result[i]
                local comp_type = type(component)
                _print_safe("üîπ Component[" .. i .. "]: " .. comp_type)
                
                if comp_type == "table" then
                    local size = 0
                    for _ in pairs(component) do size = size + 1 end
                    _print_safe("   üì¶ Table size: " .. size)
                    
                    -- Component 1: Instructions
                    if i == 1 and size > 0 then
                        _print_safe("   üîß EXTRACTING VM INSTRUCTIONS:")
                        local instr_count = 0
                        for j, instr in pairs(component) do
                            instr_count = instr_count + 1
                            if instr_count <= 30 then
                                capture_instruction(instr, j, "v28_component1", "vm_instructions")
                            end
                        end
                        if instr_count > 30 then
                            _print_safe("      ... –∏ –µ—â—ë " .. (instr_count - 30) .. " –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
                        end
                    end
                    
                    -- Component 2: Constants
                    if i == 2 and size > 0 then
                        _print_safe("   üìö EXTRACTING CONSTANTS:")
                        local const_count = 0
                        for j, const in pairs(component) do
                            const_count = const_count + 1
                            if const_count <= 100 then
                                capture_constant(const, j, "v28_component2", "vm_constants")
                            end
                        end
                        if const_count > 100 then
                            _print_safe("      ... –∏ –µ—â—ë " .. (const_count - 100) .. " –∫–æ–Ω—Å—Ç–∞–Ω—Ç")
                        end
                    end
                    
                    -- Component 4: Functions
                    if i == 4 and size > 0 then
                        _print_safe("   ‚öôÔ∏è EXTRACTING FUNCTIONS:")
                        local func_count = 0
                        for j, func in pairs(component) do
                            func_count = func_count + 1
                            if func_count <= 20 then
                                capture_function(func, "vm_func_" .. j, "v28_component4", "vm_functions")
                            end
                        end
                    end
                end
            end
        end
        
        _print_safe("üéØ ===== END v28 HOOK =====")
        _print_safe("")
        return vm_result
    end
    _print_safe("‚úÖ v28 hook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
else
    _print_safe("‚ö†Ô∏è v28 function –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
end

-- ============= HOOK v29 FUNCTION =============
if v29 then
    _print_safe("‚ö° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hook –Ω–∞ v29...")
    local original_v29 = v29
    
    v29 = function(vm_data, env, ...)
        _print_safe("")
        _print_safe("‚ö° ===== HOOK v29 EXECUTION =====")
        _print_safe("‚è∞ –í—Ä–µ–º—è: " .. os.date("%H:%M:%S"))
        _print_safe("üìä VM data type: " .. type(vm_data))
        
        if type(vm_data) == "table" and #vm_data >= 2 then
            local constants = vm_data[2]
            if type(constants) == "table" then
                _print_safe("üî§ RUNTIME CONSTANTS EXTRACTION:")
                local runtime_count = 0
                for i, const in pairs(constants) do
                    runtime_count = runtime_count + 1
                    if type(const) == "string" and #const > 0 then
                        _print_safe("   üéØ Runtime[" .. i .. "]: '" .. const .. "'")
                        capture_string_safe(const, "v29_runtime", "execution_constants")
                    end
                    if runtime_count <= 50 then
                        capture_constant(const, i, "v29_runtime", "execution_constants")
                    end
                end
                _print_safe("üìä Runtime constants processed: " .. runtime_count)
            end
            
            local instructions = vm_data[1]
            if type(instructions) == "table" then
                _print_safe("üîß RUNTIME INSTRUCTIONS:")
                local exec_count = 0
                for i, instr in pairs(instructions) do
                    exec_count = exec_count + 1
                    if exec_count <= 20 then
                        capture_instruction(instr, i, "v29_runtime", "execution_instructions")
                    end
                end
                _print_safe("üìä Runtime instructions processed: " .. exec_count)
            end
        end
        
        local result = original_v29(vm_data, env, ...)
        _print_safe("‚ö° ===== END v29 EXECUTION =====")
        _print_safe("")
        return result
    end
    _print_safe("‚úÖ v29 hook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
else
    _print_safe("‚ö†Ô∏è v29 function –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
end

-- ============= HOOK STRING FUNCTIONS (–ë–ï–ó –†–ï–ö–£–†–°–ò–ò) =============
-- Hook string.char
if string and string.char then
    local original_char = string.char
    string.char = function(...)
        local result = original_char(...)
        if type(result) == "string" and #result > 0 and (#result > 1 or string.byte(result) > 31) then
            capture_string_safe(result, "string.char", "string_generation")
        end
        return result
    end
    _print_safe("‚úÖ string.char hook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
end

-- Hook table.concat
if table and table.concat then
    local original_concat = table.concat
    table.concat = function(tbl, sep, ...)
        local result = original_concat(tbl, sep, ...)
        if type(result) == "string" and #result > 0 then
            capture_string_safe(result, "table.concat", "string_assembly")
        end
        return result
    end
    _print_safe("‚úÖ table.concat hook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
end

-- –ù–ï —Ö—É–∫–∞–µ–º print —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏!
-- –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç

-- ============= –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ =============
local function generate_final_report()
    _print_safe("")
    _print_safe("=" .. string.rep("=", 80))
    _print_safe("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ FULL HOOK DUMPER (FIXED)")
    _print_safe("=" .. string.rep("=", 80))
    
    _print_safe("üî§ –ò–ó–í–õ–ï–ß–Å–ù–ù–´–ï –°–¢–†–û–ö–ò (" .. #_FULL_DUMP.strings .. "):")
    for i, str_data in ipairs(_FULL_DUMP.strings) do
        if i <= 20 then
            _print_safe("   [" .. str_data.id .. "] (" .. str_data.source .. ") '" .. str_data.value .. "'")
        end
    end
    if #_FULL_DUMP.strings > 20 then
        _print_safe("   ... –∏ –µ—â—ë " .. (#_FULL_DUMP.strings - 20) .. " —Å—Ç—Ä–æ–∫")
    end
    
    _print_safe("")
    _print_safe("üîß –ù–ê–ô–î–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò (" .. #_FULL_DUMP.functions .. "):")
    for i, func_data in ipairs(_FULL_DUMP.functions) do
        if i <= 15 then
            _print_safe("   [" .. func_data.id .. "] " .. func_data.name .. " (" .. func_data.source .. ") " .. func_data.address)
        end
    end
    if #_FULL_DUMP.functions > 15 then
        _print_safe("   ... –∏ –µ—â—ë " .. (#_FULL_DUMP.functions - 15) .. " —Ñ—É–Ω–∫—Ü–∏–π")
    end
    
    _print_safe("")
    _print_safe("üìã –ö–û–ù–°–¢–ê–ù–¢–´ (" .. #_FULL_DUMP.constants .. "):")
    for i, const_data in ipairs(_FULL_DUMP.constants) do
        if i <= 25 then
            _print_safe("   [" .. const_data.id .. "] [" .. const_data.index .. "] " .. const_data.type .. ": " .. safe_tostring(const_data.value))
        end
    end
    if #_FULL_DUMP.constants > 25 then
        _print_safe("   ... –∏ –µ—â—ë " .. (#_FULL_DUMP.constants - 25) .. " –∫–æ–Ω—Å—Ç–∞–Ω—Ç")
    end
    
    _print_safe("")
    _print_safe("‚ö° –ò–ù–°–¢–†–£–ö–¶–ò–ò (" .. #_FULL_DUMP.instructions .. "):")
    for i, instr_data in ipairs(_FULL_DUMP.instructions) do
        if i <= 15 then
            local instr_str = ""
            if type(instr_data.instruction) == "table" then
                for j, v in ipairs(instr_data.instruction) do
                    instr_str = instr_str .. tostring(v) .. " "
                end
            else
                instr_str = tostring(instr_data.instruction)
            end
            _print_safe("   [" .. instr_data.id .. "] [" .. instr_data.index .. "] " .. instr_str)
        end
    end
    if #_FULL_DUMP.instructions > 15 then
        _print_safe("   ... –∏ –µ—â—ë " .. (#_FULL_DUMP.instructions - 15) .. " –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    end
    
    _print_safe("")
    _print_safe("üéØ –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    _print_safe("   üî§ –°—Ç—Ä–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–æ: " .. #_FULL_DUMP.strings)
    _print_safe("   üîß –§—É–Ω–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: " .. #_FULL_DUMP.functions) 
    _print_safe("   üìã –ö–æ–Ω—Å—Ç–∞–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " .. #_FULL_DUMP.constants)
    _print_safe("   ‚ö° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∑–∞—Ö–≤–∞—á–µ–Ω–æ: " .. #_FULL_DUMP.instructions)
    
    _print_safe("")
    _print_safe("üéâ –†–ï–ö–û–ù–°–¢–†–£–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î:")
    _print_safe("-" .. string.rep("-", 40))
    
    -- –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    local print_found = false
    local string_to_print = nil
    
    for _, str_data in ipairs(_FULL_DUMP.strings) do
        if str_data.value == "print" then
            print_found = true
        elseif print_found and str_data.value ~= "print" and #str_data.value > 0 then
            string_to_print = str_data.value
            break
        end
    end
    
    if print_found and string_to_print then
        _print_safe('print("' .. string_to_print .. '")')
    else
        _print_safe("-- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã—à–µ –¥–ª—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        local runtime_strings = {}
        for _, str_data in ipairs(_FULL_DUMP.strings) do
            if str_data.source == "v29_runtime" or str_data.source == "v28_component2_constant" then
                table.insert(runtime_strings, str_data.value)
            end
        end
        if #runtime_strings > 0 then
            _print_safe("-- –ù–∞–π–¥–µ–Ω–Ω—ã–µ runtime —Å—Ç—Ä–æ–∫–∏:")
            for i, str in ipairs(runtime_strings) do
                if i <= 5 then
                    _print_safe("--   '" .. str .. "'")
                end
            end
        end
    end
    
    _print_safe("")
    _print_safe("=" .. string.rep("=", 80))
    _print_safe("‚ú® HOOK DUMPER (FIXED) –∑–∞–≤–µ—Ä—à—ë–Ω: " .. os.date("%H:%M:%S"))
    _print_safe("=" .. string.rep("=", 80))
end

-- –í—ã–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –∫–æ–Ω—Ü–µ
_print_safe("")
_print_safe("üéâ –í—Å–µ —Ö—É–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...")
_print_safe("‚è∞ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: " .. os.date("%H:%M:%S"))
_print_safe("-" .. string.rep("-", 80))

-- –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –æ—Ç—á—ë—Ç–∞ –≤ –∫–æ–Ω–µ—Ü
local function call_final_report()
    generate_final_report()
end

-- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ—Ç—á—ë—Ç–∞
if os and os.time then
    local start_time = os.time()
    local check_timer = function()
        if os.time() - start_time > 3 then
            call_final_report()
        end
    end
end

-- ====== FULL HOOK INJECTION (FIXED) END ======

'''
    
    # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π hook –∫–æ–¥
    modified_code = original_code
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞ –∏–Ω–∂–µ–∫—Ü–∏–∏
    injection_patterns = [
        r'(return v15\([^)]+\)[^;]*;?\s*)$',
        r'(return [^;]+;?\s*)$',
        r'(\s*)$'
    ]
    
    injected = False
    for pattern in injection_patterns:
        match = re.search(pattern, modified_code, re.MULTILINE | re.DOTALL)
        if match:
            before = modified_code[:match.start()]
            after = modified_code[match.start():]
            modified_code = before + hook_code + "\n" + after
            injected = True
            print(f"‚úÖ Hook –∫–æ–¥ –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–¥: {match.group(1)[:50]}...")
            break
    
    if not injected:
        modified_code = hook_code + "\n" + original_code
        print("‚úÖ Hook –∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü
    modified_code += "\n\n-- –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç\nif generate_final_report then generate_final_report() end\n"
    
    # –°–æ–∑–¥–∞—ë–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    modified_filename = f"hooked_fixed_{int(time.time())}.lua"
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {modified_filename}")
    with open(modified_filename, 'w', encoding='utf-8') as f:
        f.write(modified_code)
    
    # –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç
    execution_time = time.time() - time.time()
    
    report_lines = [
        "FULL HOOK DUMPER (FIXED) - –û—Ç—á—ë—Ç",
        "=" * 60,
        "",
        f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {input_file}",
        f"üîß –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {modified_filename}",
        f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        f"üìè –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ: {len(original_code)} —Å–∏–º–≤–æ–ª–æ–≤",
        f"üìè –†–∞–∑–º–µ—Ä —Å —Ö—É–∫–∞–º–∏: {len(modified_code)} —Å–∏–º–≤–æ–ª–æ–≤",
        "",
        "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:",
        "  ‚úÖ –£–±—Ä–∞–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏—è –≤ print hook",
        "  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã–π _print_safe",
        "  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω capture_string_safe",
        "  ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç stack overflow",
        "",
        "üöÄ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ó–ê–ü–£–°–ö–£:",
        "",
        f"1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:",
        f"   lua {modified_filename}",
        "",
        "2. –¢–µ–ø–µ—Ä—å –Ω–µ –±—É–¥–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏ –∏ stack overflow!",
        "",
        "üéØ –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:",
        "   üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫",
        "   üîß –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π",
        "   üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç",
        "   üéâ –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–æ–¥–∞",
        "",
        "=" * 60,
        f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≥–æ—Ç–æ–≤: {modified_filename}",
        "=" * 60
    ]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(report_lines))
    
    print("")
    print("üéâ FULL HOOK DUMPER (FIXED) –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {modified_filename}")
    print(f"   üìÑ –û—Ç—á—ë—Ç: {output_file}")
    print("")
    print("üöÄ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:")
    print(f"   lua {modified_filename}")
    print("")
    print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–∫—É—Ä—Å–∏–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")

if __name__ == "__main__":
    main()