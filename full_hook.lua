#!/usr/bin/env lua
--[[
FULL HOOK DUMPER –¥–ª—è LuaObfuscator.com
–ü–æ–ª–Ω—ã–π –¥–∞–º–ø –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫, —Ñ—É–Ω–∫—Ü–∏–π, VM –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: lua full_hook.lua input.lua output.txt
–ê–≤—Ç–æ—Ä: Deobfuscation Framework
]]--

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if #arg < 2 then
    print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: lua full_hook.lua input.lua output.txt")
    print("   input.lua  - –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª")
    print("   output.txt - —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    os.exit(1)
end

local input_file = arg[1]
local output_file = arg[2]

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
local file = io.open(input_file, "r")
if not file then
    print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª " .. input_file .. " –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    os.exit(1)
end
file:close()

print("üîç FULL HOOK DUMPER –¥–ª—è LuaObfuscator.com")
print("üìÅ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: " .. input_file)
print("üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: " .. output_file)
print("")

-- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
local dump_data = {
    strings = {},
    functions = {},
    vm_instructions = {},
    constants = {},
    opcodes = {},
    call_stack = {},
    variable_assignments = {},
    function_calls = {},
    start_time = os.time()
}

-- –°—á–µ—Ç—á–∏–∫–∏
local counters = {
    strings_found = 0,
    functions_hooked = 0,
    instructions_captured = 0,
    calls_traced = 0
}

-- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
local function log(message)
    table.insert(dump_data.call_stack, os.date("%H:%M:%S") .. " | " .. tostring(message))
    print("üîç " .. message)
end

local function dump_table_safe(tbl, max_depth, current_depth)
    current_depth = current_depth or 0
    max_depth = max_depth or 3
    
    if current_depth > max_depth then
        return "[MAX_DEPTH_REACHED]"
    end
    
    if type(tbl) ~= "table" then
        return tostring(tbl)
    end
    
    local result = "{"
    local count = 0
    for k, v in pairs(tbl) do
        count = count + 1
        if count > 10 then
            result = result .. ", ..."
            break
        end
        
        local key_str = tostring(k)
        local val_str
        
        if type(v) == "table" then
            val_str = dump_table_safe(v, max_depth, current_depth + 1)
        elseif type(v) == "string" then
            val_str = '"' .. v .. '"'
        elseif type(v) == "function" then
            val_str = "function"
        else
            val_str = tostring(v)
        end
        
        result = result .. key_str .. "=" .. val_str
        if count > 1 then result = "," .. result end
    end
    result = result .. "}"
    return result
end

local function save_string(str, context)
    if type(str) == "string" and #str > 0 then
        counters.strings_found = counters.strings_found + 1
        table.insert(dump_data.strings, {
            id = counters.strings_found,
            value = str,
            length = #str,
            context = context,
            timestamp = os.date("%H:%M:%S")
        })
        log("STRING [" .. counters.strings_found .. "] (" .. context .. "): '" .. str .. "'")
    end
end

local function save_function_info(func, name, context)
    if type(func) == "function" then
        counters.functions_hooked = counters.functions_hooked + 1
        table.insert(dump_data.functions, {
            id = counters.functions_hooked,
            name = name or "anonymous",
            address = tostring(func),
            context = context,
            timestamp = os.date("%H:%M:%S")
        })
        log("FUNCTION [" .. counters.functions_hooked .. "] " .. (name or "anonymous") .. " (" .. context .. "): " .. tostring(func))
    end
end

-- –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
log("–ß–∏—Ç–∞–µ–º –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª...")
local original_code = ""
local file = io.open(input_file, "r")
if file then
    original_code = file:read("*all")
    file:close()
else
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª!")
    os.exit(1)
end

-- –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º —Ö—É–∫–∏ –≤ –∫–æ–¥
log("–ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º —Ö—É–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–∞–º–ø–∞...")

local hook_code = [[
-- FULL HOOK INJECTION START
print("üöÄ –•—É–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∞–º–ø...")

-- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞–º–ø–∞
_DUMP_STRINGS = {}
_DUMP_FUNCTIONS = {}
_DUMP_CONSTANTS = {}
_DUMP_INSTRUCTIONS = {}
_STRING_COUNTER = 0
_FUNC_COUNTER = 0

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–∞–º–ø–∞ —Ç–∞–±–ª–∏—Ü
local function safe_dump(obj, max_depth, current_depth)
    current_depth = current_depth or 0
    max_depth = max_depth or 2
    
    if current_depth > max_depth then return "[DEEP]" end
    if type(obj) ~= "table" then return tostring(obj) end
    
    local result = "{"
    local count = 0
    for k, v in pairs(obj) do
        count = count + 1
        if count > 5 then result = result .. ",..."; break end
        if count > 1 then result = result .. "," end
        result = result .. tostring(k) .. "="
        if type(v) == "table" then
            result = result .. safe_dump(v, max_depth, current_depth + 1)
        elseif type(v) == "string" then
            result = result .. '"' .. v .. '"'
        else
            result = result .. tostring(v)
        end
    end
    return result .. "}"
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
local function capture_string(str, context)
    if type(str) == "string" and #str > 0 then
        _STRING_COUNTER = _STRING_COUNTER + 1
        _DUMP_STRINGS[_STRING_COUNTER] = {str, context, os.date("%H:%M:%S")}
        print("üìù STRING[" .. _STRING_COUNTER .. "] (" .. (context or "unknown") .. "): '" .. str .. "'")
    end
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
local function capture_function(func, name, context)
    if type(func) == "function" then
        _FUNC_COUNTER = _FUNC_COUNTER + 1
        _DUMP_FUNCTIONS[_FUNC_COUNTER] = {tostring(func), name or "anonymous", context or "unknown", os.date("%H:%M:%S")}
        print("üîß FUNCTION[" .. _FUNC_COUNTER .. "] " .. (name or "anonymous") .. " (" .. (context or "unknown") .. "): " .. tostring(func))
    end
end

-- ========== –•–£–ö–ò–ù–ì v28 –§–£–ù–ö–¶–ò–ò ==========
if v28 then
    local original_v28 = v28
    v28 = function(...)
        print("üéØ === HOOKING v28 FUNCTION ===")
        local vm_structure = original_v28(...)
        
        print("üìä VM Structure type:", type(vm_structure))
        
        if type(vm_structure) == "table" then
            print("üìã VM Components count:", #vm_structure)
            
            for i = 1, #vm_structure do
                local component = vm_structure[i]
                print("üîπ Component[" .. i .. "] type: " .. type(component))
                
                if type(component) == "table" then
                    local comp_size = 0
                    for _ in pairs(component) do comp_size = comp_size + 1 end
                    print("   üì¶ Table size: " .. comp_size)
                    
                    -- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ VM (–æ–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)
                    if i == 1 and comp_size > 0 then
                        print("   üîß VM INSTRUCTIONS:")
                        local instr_count = 0
                        for j, instr in pairs(component) do
                            instr_count = instr_count + 1
                            if instr_count <= 20 then  -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
                                if type(instr) == "table" then
                                    local instr_str = ""
                                    for k, v in ipairs(instr) do
                                        instr_str = instr_str .. tostring(v) .. " "
                                    end
                                    print("      [" .. j .. "] " .. instr_str:trim())
                                    _DUMP_INSTRUCTIONS[#_DUMP_INSTRUCTIONS + 1] = {j, instr_str:trim(), "vm_instruction"}
                                else
                                    print("      [" .. j .. "] " .. tostring(instr))
                                    _DUMP_INSTRUCTIONS[#_DUMP_INSTRUCTIONS + 1] = {j, tostring(instr), "vm_single"}
                                end
                            end
                        end
                        if instr_count > 20 then
                            print("      ... –∏ –µ—â—ë " .. (instr_count - 20) .. " –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
                        end
                    end
                    
                    -- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–æ–±—ã—á–Ω–æ –≤—Ç–æ—Ä–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)
                    if i == 2 and comp_size > 0 then
                        print("   üìö CONSTANTS TABLE:")
                        local const_count = 0
                        for j, const in pairs(component) do
                            const_count = const_count + 1
                            if const_count <= 50 then  -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 50 –∫–æ–Ω—Å—Ç–∞–Ω—Ç
                                local const_type = type(const)
                                print("      [" .. j .. "] " .. const_type .. ": " .. tostring(const))
                                
                                -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
                                if const_type == "string" then
                                    capture_string(const, "vm_constant")
                                end
                                
                                _DUMP_CONSTANTS[#_DUMP_CONSTANTS + 1] = {j, const, const_type, "vm_constant"}
                            end
                        end
                        if const_count > 50 then
                            print("      ... –∏ –µ—â—ë " .. (const_count - 50) .. " –∫–æ–Ω—Å—Ç–∞–Ω—Ç")
                        end
                    end
                    
                    -- –§—É–Ω–∫—Ü–∏–∏ (–æ–±—ã—á–Ω–æ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)
                    if i == 4 and comp_size > 0 then
                        print("   ‚öôÔ∏è  FUNCTIONS TABLE:")
                        local func_count = 0
                        for j, func in pairs(component) do
                            func_count = func_count + 1
                            if func_count <= 10 then
                                capture_function(func, "vm_function_" .. j, "vm_functions")
                            end
                        end
                    end
                end
            end
        end
        
        print("üéØ === END v28 HOOK ===")
        return vm_structure
    end
    print("‚úÖ v28 function hooked!")
end

-- ========== –•–£–ö–ò–ù–ì v29 –§–£–ù–ö–¶–ò–ò ==========
if v29 then
    local original_v29 = v29
    v29 = function(vm_data, env, ...)
        print("‚ö° === HOOKING v29 EXECUTION ===")
        print("üìä VM Data type:", type(vm_data))
        
        if type(vm_data) == "table" and #vm_data >= 2 then
            local constants = vm_data[2]
            if type(constants) == "table" then
                print("üî§ RUNTIME STRINGS EXTRACTION:")
                local string_count = 0
                for i, const in pairs(constants) do
                    if type(const) == "string" and #const > 0 then
                        string_count = string_count + 1
                        print("   üéØ Runtime[" .. i .. "]: '" .. const .. "'")
                        capture_string(const, "runtime_execution")
                    end
                end
                print("üìä Total runtime strings found: " .. string_count)
            end
            
            -- –î–∞–º–ø–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            local instructions = vm_data[1]
            if type(instructions) == "table" then
                print("üîß EXECUTION INSTRUCTIONS:")
                local exec_count = 0
                for i, instr in pairs(instructions) do
                    exec_count = exec_count + 1
                    if exec_count <= 10 then
                        if type(instr) == "table" then
                            local instr_dump = safe_dump(instr)
                            print("   ‚ö° Exec[" .. i .. "]: " .. instr_dump)
                        end
                    end
                end
            end
        end
        
        local result = original_v29(vm_data, env, ...)
        print("‚ö° === END v29 EXECUTION ===")
        return result
    end
    print("‚úÖ v29 function hooked!")
end

-- ========== –•–£–ö–ò–ù–ì –°–¢–†–û–ö–û–í–´–• –§–£–ù–ö–¶–ò–ô ==========
-- –•—É–∫ string.char –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫
if string and string.char then
    local original_char = string.char
    string.char = function(...)
        local args = {...}
        local result = original_char(...)
        if #result > 0 and (#result > 1 or string.byte(result) > 31) then
            capture_string(result, "string.char")
        end
        return result
    end
    print("‚úÖ string.char hooked!")
end

-- –•—É–∫ table.concat –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏ —Å—Ç—Ä–æ–∫
if table and table.concat then
    local original_concat = table.concat
    table.concat = function(tbl, sep, ...)
        local result = original_concat(tbl, sep, ...)
        if type(result) == "string" and #result > 0 then
            capture_string(result, "table.concat")
        end
        return result
    end
    print("‚úÖ table.concat hooked!")
end

-- –•—É–∫ print –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞
if print then
    local original_print = print
    print = function(...)
        local args = {...}
        for i, arg in ipairs(args) do
            if type(arg) == "string" then
                capture_string(arg, "print_output")
            end
        end
        return original_print(...)
    end
    print("‚úÖ print function hooked!")
end

-- ========== –§–ò–ù–ê–õ–¨–ù–´–ô –î–ê–ú–ü ==========
local function final_dump()
    print("\n" .. "="*80)
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ FULL HOOK DUMPER")
    print("="*80)
    
    print("üî§ –ù–ê–ô–î–ï–ù–û –°–¢–†–û–ö: " .. #_DUMP_STRINGS)
    for i, str_data in ipairs(_DUMP_STRINGS) do
        print("   [" .. i .. "] (" .. str_data[2] .. ") " .. str_data[3] .. ": '" .. str_data[1] .. "'")
    end
    
    print("\nüîß –ù–ê–ô–î–ï–ù–û –§–£–ù–ö–¶–ò–ô: " .. #_DUMP_FUNCTIONS)
    for i, func_data in ipairs(_DUMP_FUNCTIONS) do
        print("   [" .. i .. "] " .. func_data[2] .. " (" .. func_data[3] .. ") " .. func_data[4] .. ": " .. func_data[1])
    end
    
    print("\nüìã –ù–ê–ô–î–ï–ù–û –ö–û–ù–°–¢–ê–ù–¢: " .. #_DUMP_CONSTANTS)
    for i, const_data in ipairs(_DUMP_CONSTANTS) do
        if i <= 20 then  -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            print("   [" .. const_data[1] .. "] " .. const_data[3] .. ": " .. tostring(const_data[2]))
        end
    end
    if #_DUMP_CONSTANTS > 20 then
        print("   ... –∏ –µ—â—ë " .. (#_DUMP_CONSTANTS - 20) .. " –∫–æ–Ω—Å—Ç–∞–Ω—Ç")
    end
    
    print("\n‚ö° –ù–ê–ô–î–ï–ù–û –ò–ù–°–¢–†–£–ö–¶–ò–ô: " .. #_DUMP_INSTRUCTIONS)
    for i, instr_data in ipairs(_DUMP_INSTRUCTIONS) do
        if i <= 15 then  -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
            print("   [" .. instr_data[1] .. "] " .. instr_data[2])
        end
    end
    if #_DUMP_INSTRUCTIONS > 15 then
        print("   ... –∏ –µ—â—ë " .. (#_DUMP_INSTRUCTIONS - 15) .. " –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    end
    
    print("\nüéØ –†–ï–ó–Æ–ú–ï:")
    print("   –°—Ç—Ä–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–æ: " .. #_DUMP_STRINGS)
    print("   –§—É–Ω–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: " .. #_DUMP_FUNCTIONS)
    print("   –ö–æ–Ω—Å—Ç–∞–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " .. #_DUMP_CONSTANTS)
    print("   –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∑–∞—Ö–≤–∞—á–µ–Ω–æ: " .. #_DUMP_INSTRUCTIONS)
    print("="*80)
end

-- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–º–ø –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
if os and os.exit then
    local original_exit = os.exit
    os.exit = function(...)
        final_dump()
        return original_exit(...)
    end
end

print("üéâ –í—Å–µ —Ö—É–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥...")
print("-"*60)

-- FULL HOOK INJECTION END
]]

-- –î–æ–±–∞–≤–ª—è–µ–º hook_code –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π return
local modified_code = original_code:gsub("(return v15%([^)]+%)%;?)$", hook_code .. "\n%1")

-- –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
if modified_code == original_code then
    modified_code = hook_code .. "\n" .. original_code
end

-- –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
local temp_file = "temp_hooked_" .. os.time() .. ".lua"
local file = io.open(temp_file, "w")
if file then
    file:write(modified_code)
    file:close()
    log("–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ " .. temp_file)
else
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª!")
    os.exit(1)
end

-- –í—ã–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
log("–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–¥ —Å –ø–æ–ª–Ω—ã–º–∏ —Ö—É–∫–∞–º–∏...")

local handle = io.popen("lua " .. temp_file .. " 2>&1")
local execution_output = ""
if handle then
    execution_output = handle:read("*all")
    handle:close()
else
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥!")
    os.exit(1)
end

-- –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
os.remove(temp_file)

-- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
log("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")

local strings_found = {}
local functions_found = {}
local constants_found = {}
local instructions_found = {}

-- –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
for line in execution_output:gmatch("[^\r\n]+") do
    -- –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏
    local str_match = line:match("üìù STRING%[(%d+)%] %(([^)]+)%): '([^']*)'")
    if str_match then
        local id, context, value = line:match("üìù STRING%[(%d+)%] %(([^)]+)%): '([^']*)'")
        if id and context and value then
            table.insert(strings_found, {
                id = tonumber(id),
                context = context,
                value = value,
                length = #value
            })
        end
    end
    
    -- –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    local func_match = line:match("üîß FUNCTION%[(%d+)%] ([^%(]+) %(([^)]+)%): (.*)")
    if func_match then
        local id, name, context, address = line:match("üîß FUNCTION%[(%d+)%] ([^%(]+) %(([^)]+)%): (.*)")
        if id and name and context and address then
            table.insert(functions_found, {
                id = tonumber(id),
                name = name,
                context = context,
                address = address
            })
        end
    end
    
    -- –ò—â–µ–º runtime —Å—Ç—Ä–æ–∫–∏
    local runtime_match = line:match("üéØ Runtime%[(%d+)%]: '([^']*)'")
    if runtime_match then
        local id, value = line:match("üéØ Runtime%[(%d+)%]: '([^']*)'")
        if id and value then
            table.insert(strings_found, {
                id = "runtime_" .. id,
                context = "runtime",
                value = value,
                length = #value
            })
        end
    end
end

-- –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
local report = {
    "FULL HOOK DUMPER - –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏",
    "=" .. string.rep("=", 60),
    "",
    "üìÅ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: " .. input_file,
    "üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: " .. os.date("%Y-%m-%d %H:%M:%S"),
    "‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " .. (os.time() - dump_data.start_time) .. " —Å–µ–∫—É–Ω–¥",
    "",
    "üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–û–ë–§–£–°–ö–ê–¶–ò–ò:",
    "   ‚Ä¢ –°—Ç—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: " .. #strings_found,
    "   ‚Ä¢ –§—É–Ω–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: " .. #functions_found,
    "   ‚Ä¢ –ö–æ–Ω—Å—Ç–∞–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " .. #constants_found,
    "",
    "üî§ –ò–ó–í–õ–ï–ß–Å–ù–ù–´–ï –°–¢–†–û–ö–ò:",
    "-" .. string.rep("-", 40)
}

-- –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
for i, str_data in ipairs(strings_found) do
    table.insert(report, string.format("[%s] (%s) Length:%d - '%s'", 
        tostring(str_data.id), str_data.context, str_data.length, str_data.value))
end

table.insert(report, "")
table.insert(report, "üîß –ù–ê–ô–î–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
table.insert(report, "-" .. string.rep("-", 40))

-- –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
for i, func_data in ipairs(functions_found) do
    table.insert(report, string.format("[%d] %s (%s) - %s", 
        func_data.id, func_data.name, func_data.context, func_data.address))
end

table.insert(report, "")
table.insert(report, "üìã –ü–û–õ–ù–´–ô –í–´–í–û–î –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
table.insert(report, "-" .. string.rep("-", 60))
table.insert(report, execution_output)

table.insert(report, "")
table.insert(report, "üéâ –†–ï–ö–û–ù–°–¢–†–£–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î:")
table.insert(report, "-" .. string.rep("-", 40))

-- –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
local reconstructed = {}
for i, str_data in ipairs(strings_found) do
    if str_data.context == "runtime" or str_data.context == "vm_constant" then
        if str_data.value == "print" then
            -- –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
            for j, next_str in ipairs(strings_found) do
                if j > i and next_str.value ~= "print" and #next_str.value > 0 then
                    table.insert(reconstructed, 'print("' .. next_str.value .. '")')
                    break
                end
            end
        end
    end
end

if #reconstructed > 0 then
    for i, line in ipairs(reconstructed) do
        table.insert(report, line)
    end
else
    table.insert(report, "-- –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥")
    table.insert(report, "-- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã—à–µ")
end

table.insert(report, "")
table.insert(report, "=" .. string.rep("=", 60))
table.insert(report, "–û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: " .. os.date("%Y-%m-%d %H:%M:%S"))

-- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª
local output = io.open(output_file, "w")
if output then
    output:write(table.concat(report, "\n"))
    output:close()
    log("–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ " .. output_file)
else
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç!")
    os.exit(1)
end

-- –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print("")
print("üéâ FULL HOOK DUMPER –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
print("   ‚Ä¢ –°—Ç—Ä–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–æ: " .. #strings_found)
print("   ‚Ä¢ –§—É–Ω–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: " .. #functions_found)
print("   ‚Ä¢ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: " .. output_file)

if #strings_found > 0 then
    print("")
    print("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:")
    for i, str_data in ipairs(strings_found) do
        if i <= 5 then  -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print("   " .. i .. ". '" .. str_data.value .. "' (" .. str_data.context .. ")")
        end
    end
    if #strings_found > 5 then
        print("   ... –∏ –µ—â—ë " .. (#strings_found - 5) .. " —Å—Ç—Ä–æ–∫ (—Å–º. –≤ –æ—Ç—á—ë—Ç–µ)")
    end
end

print("")
print("üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ñ–∞–π–ª–µ: " .. output_file)