-- RUNTIME EXTRACTION SCRIPT –¥–ª—è LuaObfuscator.com
-- –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ü–ï–†–ï–î –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π return v15(...)

print("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...")

-- –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é v28
local original_v28 = v28
local extracted_data = {}

local function debug_v28()
    print("=== –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó V28 ===")
    
    -- –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    local vm_structure = original_v28()
    
    print("–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ v28:", type(vm_structure))
    
    if type(vm_structure) == "table" then
        print("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã VM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
        
        for i = 1, #vm_structure do
            local component = vm_structure[i]
            print(f"  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç [{i}]: {type(component)}")
            
            if type(component) == "table" then
                print(f"    –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {#component}")
                
                -- –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
                if i == 1 and #component > 0 then
                    print("    –ò–ù–°–¢–†–£–ö–¶–ò–ò –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –ú–ê–®–ò–ù–´:")
                    for j = 1, math.min(#component, 10) do
                        local instr = component[j]
                        if type(instr) == "table" then
                            local instr_str = ""
                            for k = 1, #instr do
                                instr_str = instr_str .. tostring(instr[k]) .. " "
                            end
                            print(f"      –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {j}: {instr_str}")
                        else
                            print(f"      –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {j}: {instr}")
                        end
                    end
                    if #component > 10 then
                        print(f"      ... –µ—â—ë {#component - 10} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
                    end
                end
                
                -- –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç  
                if i == 2 and #component > 0 then
                    print("    –ö–û–ù–°–¢–ê–ù–¢–´:")
                    for j = 1, math.min(#component, 20) do
                        local const = component[j]
                        print(f"      –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ {j}: {const} (—Ç–∏–ø: {type(const)})")
                        
                        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
                        if type(const) == "string" then
                            table.insert(extracted_data, {
                                type = "string_constant",
                                index = j,
                                value = const
                            })
                        end
                    end
                    if #component > 20 then
                        print(f"      ... –µ—â—ë {#component - 20} –∫–æ–Ω—Å—Ç–∞–Ω—Ç")
                    end
                end
                
                -- –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–π
                if i == 4 and #component > 0 then
                    print("    –§–£–ù–ö–¶–ò–ò:")
                    for j = 1, math.min(#component, 5) do
                        local func = component[j]
                        print(f"      –§—É–Ω–∫—Ü–∏—è {j}: {type(func)}")
                    end
                end
            end
        end
    end
    
    print("=== –ö–û–ù–ï–¶ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ò–ó V28 ===")
    return vm_structure
end

-- –ó–∞–º–µ–Ω—è–µ–º v28
v28 = debug_v28

-- –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º v29 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
local original_v29 = v29
v29 = function(vm_data, env, ...)
    print("=== –í–´–ü–û–õ–ù–ï–ù–ò–ï –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –ú–ê–®–ò–ù–´ ===")
    
    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    if type(vm_data) == "table" and #vm_data >= 2 then
        local constants = vm_data[2]
        if type(constants) == "table" then
            print("–°–¢–†–û–ö–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –ù–ê–ô–î–ï–ù–´:")
            for i = 1, #constants do
                local const = constants[i]
                if type(const) == "string" and #const > 0 then
                    print(f"  [{i}] '{const}'")
                end
            end
        end
    end
    
    -- –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
    local result = original_v29(vm_data, env, ...)
    
    print("=== –í–ò–†–¢–£–ê–õ–¨–ù–ê–Ø –ú–ê–®–ò–ù–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")
    return result
end

-- –í—ã–≤–æ–¥–∏–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
print("\nüìä –°–û–ë–†–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:")
for i, data in ipairs(extracted_data) do
    if data.type == "string_constant" then
        print(f"  –°—Ç—Ä–æ–∫–∞ {data.index}: '{data.value}'")
    end
end

print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å –æ—Ç–ª–∞–¥–∫–æ–π...")
