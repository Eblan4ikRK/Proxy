#!/usr/bin/env python3
"""
UNIVERSAL DEOBFUSCATION RUNNER
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ LuaObfuscator.com

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 run_full_analysis.py input.lua
"""

import sys
import os
import subprocess
import time
import json
from datetime import datetime

def print_banner():
    print("üîì" * 60)
    print("üî• UNIVERSAL LuaObfuscator.com DEOBFUSCATION SUITE")
    print("üîì" * 60)
    print("")

def check_file_exists(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    return os.path.exists(filename)

def run_tool(tool_name, command, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîß –ó–∞–ø—É—Å–∫–∞–µ–º: {tool_name}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
    print(f"‚ö° –ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
    print("-" * 50)
    
    start_time = time.time()
    try:
        result = subprocess.run(command, capture_output=True, text=True, timeout=120)
        execution_time = time.time() - start_time
        
        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if result.returncode == 0 else "‚ùå –û—à–∏–±–∫–∞"
        print(f"{status} ({execution_time:.2f}s)")
        
        if result.stdout:
            print("üì§ –í—ã–≤–æ–¥:")
            print(result.stdout[:500] + ("..." if len(result.stdout) > 500 else ""))
        
        if result.stderr and result.returncode != 0:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∏:")
            print(result.stderr[:300])
        
        return {
            'tool': tool_name,
            'status': 'success' if result.returncode == 0 else 'error',
            'execution_time': execution_time,
            'output': result.stdout,
            'error': result.stderr,
            'return_code': result.returncode
        }
    
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç (120s)")
        return {
            'tool': tool_name,
            'status': 'timeout',
            'execution_time': 120,
            'output': '',
            'error': 'Timeout after 120 seconds',
            'return_code': -1
        }
    except Exception as e:
        print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return {
            'tool': tool_name,
            'status': 'exception',
            'execution_time': 0,
            'output': '',
            'error': str(e),
            'return_code': -2
        }
    
    print("")

def main():
    if len(sys.argv) < 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 run_full_analysis.py input.lua")
        print("   input.lua - –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        sys.exit(1)
    
    input_file = sys.argv[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    if not check_file_exists(input_file):
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    print_banner()
    print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª: {input_file}")
    print(f"üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("")
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_dir = f"analysis_results_{int(time.time())}"
    os.makedirs(results_dir, exist_ok=True)
    print(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_dir}/")
    print("")
    
    results = []
    
    # –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    tools = [
        {
            'name': 'FULL HOOK DUMPER (Python)',
            'command': ['python3', 'full_hook.py', input_file, f'{results_dir}/full_hook_report.txt'],
            'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—ä–µ–∫—Ü–∏—è —Ö—É–∫–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö',
            'required_files': ['full_hook.py']
        },
        {
            'name': 'V28 Analyzer (Fixed)',
            'command': ['python3', 'v28_analyzer_fixed.py'],
            'description': '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ v28 –∏ VM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
            'required_files': ['v28_analyzer_fixed.py']
        },
        {
            'name': 'LuaObfuscator.com Deobfuscator',
            'command': ['python3', 'luaobfuscator_com_deobfuscator.py', input_file, '-v'],
            'description': '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤',
            'required_files': ['luaobfuscator_com_deobfuscator.py']
        },
        {
            'name': 'Hex Decoder',
            'command': ['python3', 'hex_decoder.py'],
            'description': '–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ hex payload –∏–∑ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞',
            'required_files': ['hex_decoder.py']
        },
        {
            'name': 'LuaObfuscator Decoder',
            'command': ['python3', 'luaobfuscator_decoder.py'],
            'description': '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ Q-placeholder',
            'required_files': ['luaobfuscator_decoder.py']
        },
        {
            'name': 'Advanced LuaObfuscator Deobfuscator',
            'command': ['python3', 'advanced_luaobfuscator_deobfuscator.py'],
            'description': '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å ML –ø–æ–¥—Ö–æ–¥–∞–º–∏',
            'required_files': ['advanced_luaobfuscator_deobfuscator.py']
        }
    ]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
    print("=" * 60)
    
    available_tools = 0
    successful_tools = 0
    
    for tool in tools:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        missing_files = [f for f in tool['required_files'] if not check_file_exists(f)]
        
        if missing_files:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {tool['name']}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã {missing_files}")
            results.append({
                'tool': tool['name'],
                'status': 'missing_files',
                'execution_time': 0,
                'output': '',
                'error': f"Missing files: {missing_files}",
                'return_code': -3
            })
            continue
        
        available_tools += 1
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        result = run_tool(tool['name'], tool['command'], tool['description'])
        results.append(result)
        
        if result['status'] == 'success':
            successful_tools += 1
    
    # –°–æ–∑–¥–∞—ë–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("=" * 60)
    print("üìä –°–û–ó–î–ê–ù–ò–ï –ò–¢–û–ì–û–í–û–ì–û –û–¢–ß–Å–¢–ê")
    print("=" * 60)
    
    report = {
        'analysis_info': {
            'input_file': input_file,
            'analysis_date': datetime.now().isoformat(),
            'results_directory': results_dir,
            'total_tools': len(tools),
            'available_tools': available_tools,
            'successful_tools': successful_tools
        },
        'tool_results': results
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –æ—Ç—á—ë—Ç
    json_report_path = f'{results_dir}/complete_analysis_report.json'
    with open(json_report_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
    text_report_path = f'{results_dir}/analysis_summary.txt'
    with open(text_report_path, 'w', encoding='utf-8') as f:
        f.write("UNIVERSAL DEOBFUSCATION ANALYSIS REPORT\n")
        f.write("=" * 60 + "\n\n")
        f.write(f"üìÅ –§–∞–π–ª: {input_file}\n")
        f.write(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results_dir}/\n\n")
        
        f.write("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
        f.write(f"   –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}\n")
        f.write(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {available_tools}\n")
        f.write(f"   –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {successful_tools}\n")
        f.write(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tools/available_tools*100) if available_tools > 0 else 0:.1f}%\n\n")
        
        f.write("üîß –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú:\n")
        f.write("-" * 40 + "\n")
        
        for result in results:
            status_emoji = {
                'success': '‚úÖ',
                'error': '‚ùå', 
                'timeout': '‚è∞',
                'exception': 'üí•',
                'missing_files': '‚ö†Ô∏è'
            }.get(result['status'], '‚ùì')
            
            f.write(f"{status_emoji} {result['tool']}\n")
            f.write(f"   –°—Ç–∞—Ç—É—Å: {result['status']}\n")
            f.write(f"   –í—Ä–µ–º—è: {result['execution_time']:.2f}s\n")
            
            if result['status'] == 'success' and result['output']:
                preview = result['output'][:200].replace('\n', ' ')
                f.write(f"   –í—ã–≤–æ–¥: {preview}...\n")
            elif result['error']:
                f.write(f"   –û—à–∏–±–∫–∞: {result['error'][:100]}...\n")
            f.write("\n")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        f.write("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n")
        f.write("-" * 40 + "\n")
        
        if successful_tools == 0:
            f.write("‚ùå –ù–∏ –æ–¥–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ.\n")
            f.write("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n")
            f.write("   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞\n")
            f.write("   - –ù–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n")
            f.write("   - –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É\n")
        elif successful_tools < available_tools // 2:
            f.write("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n")
            f.write("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫\n")
            f.write("   - –ó–∞–ø—É—Å—Ç–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ\n")
            f.write("   - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã\n")
        else:
            f.write("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!\n")
            f.write("   - –ò–∑—É—á–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã\n")
            f.write("   - –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ FULL HOOK —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n")
            f.write("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ JSON —Ñ–∞–π–ª—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n")
        
        f.write(f"\nüìÑ –ü–æ–ª–Ω—ã–π JSON –æ—Ç—á—ë—Ç: {json_report_path}\n")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {successful_tools}/{available_tools} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
    print(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_dir}/")
    print(f"üìÑ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç: {text_report_path}")
    print(f"üìã JSON –¥–∞–Ω–Ω—ã–µ: {json_report_path}")
    print("")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if successful_tools > 0:
        print("üéâ –£–°–ü–ï–®–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:")
        for result in results:
            if result['status'] == 'success':
                print(f"   ‚úÖ {result['tool']} ({result['execution_time']:.1f}s)")
        print("")
    
    if successful_tools < available_tools:
        print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:")
        for result in results:
            if result['status'] != 'success':
                print(f"   ‚ùå {result['tool']}: {result['status']}")
        print("")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è FULL HOOK
    full_hook_result = next((r for r in results if 'FULL HOOK' in r['tool']), None)
    if full_hook_result and full_hook_result['status'] == 'success':
        print("üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –¥–ª—è FULL HOOK:")
        print("   1. –ù–∞–π–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π hooked_*.lua —Ñ–∞–π–ª")
        print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Lua: sudo apt install lua5.3")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: lua hooked_*.lua")
        print("   4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—ã–π –¥–∞–º–ø –¥–∞–Ω–Ω—ã—Ö!")
        print("")
    
    print("üéØ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑—É—á–∏—Ç–µ –æ—Ç—á—ë—Ç—ã!")
    print("üîì" * 60)

if __name__ == "__main__":
    main()