#!/usr/bin/env python3
"""
üîì ONE-CLICK LuaObfuscator.com DEOBFUSCATOR
–ë—ã—Å—Ç—Ä–∞—è –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –≤ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 deobfuscate.py script.lua
"""

import sys
import os
import re
import time
import subprocess
from datetime import datetime

def print_header():
    print("üîì" * 50)
    print("üî• ONE-CLICK LuaObfuscator.com DEOBFUSCATOR")
    print("üîì" * 50)
    print()

def extract_strings_from_hex(hex_string):
    """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∏–∑ hex payload"""
    strings = []
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å—Ç—Ä–æ–∫ –≤ hex
    hex_patterns = re.findall(r'[0-9A-Fa-f]{6,}', hex_string)
    
    for pattern in hex_patterns:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ hex
            if len(pattern) % 2 == 0:
                decoded = bytes.fromhex(pattern).decode('utf-8', errors='ignore')
                # –§–∏–ª—å—Ç—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–µ —Å—Ç—Ä–æ–∫–∏
                if len(decoded) > 1 and decoded.isprintable() and not decoded.isdigit():
                    strings.append(decoded)
        except:
            continue
    
    return strings

def analyze_lua_structure(code):
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Lua –∫–æ–¥–∞"""
    results = {
        'variables': [],
        'functions': [],
        'hex_payloads': [],
        'strings': []
    }
    
    # –ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ v0-v99
    variables = re.findall(r'v(\d+)', code)
    results['variables'] = list(set(variables))
    
    # –ò—â–µ–º hex —Å—Ç—Ä–æ–∫–∏
    hex_matches = re.findall(r'"([^"]*(?:LOL|023Q|[0-9A-Fa-f]{20,})[^"]*)"', code)
    results['hex_payloads'] = hex_matches
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ hex
    for hex_payload in hex_matches:
        extracted_strings = extract_strings_from_hex(hex_payload)
        results['strings'].extend(extracted_strings)
    
    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    function_matches = re.findall(r'function\s*\([^)]*\)|local\s+function\s+(\w+)', code)
    results['functions'] = function_matches
    
    return results

def create_injection_script(original_file):
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–π injection —Å–∫—Ä–∏–ø—Ç"""
    injection_code = '''-- SIMPLE DEOBFUSCATION INJECTION
print("üöÄ Deobfuscation injection –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")

-- Hook –¥–ª—è v28
if v28 then
    local original_v28 = v28
    v28 = function(...)
        print("üéØ v28 –≤—ã–∑–≤–∞–Ω–∞!")
        local result = original_v28(...)
        if type(result) == "table" and #result >= 2 then
            local constants = result[2]
            if type(constants) == "table" then
                print("üìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:")
                for i, const in pairs(constants) do
                    if type(const) == "string" and #const > 0 then
                        print("  [" .. i .. "] '" .. const .. "'")
                    end
                end
            end
        end
        return result
    end
end

-- Hook –¥–ª—è v29
if v29 then
    local original_v29 = v29
    v29 = function(vm_data, env, ...)
        print("‚ö° v29 –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!")
        if type(vm_data) == "table" and #vm_data >= 2 then
            local constants = vm_data[2]
            if type(constants) == "table" then
                print("üî§ Runtime —Å—Ç—Ä–æ–∫–∏:")
                for i, const in pairs(constants) do
                    if type(const) == "string" and #const > 0 then
                        print("  Runtime[" .. i .. "]: '" .. const .. "'")
                    end
                end
            end
        end
        return original_v29(vm_data, env, ...)
    end
end

print("‚úÖ Injection –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥...")
print("-" * 50)

'''
    
    # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    with open(original_file, 'r', encoding='utf-8') as f:
        original_code = f.read()
    
    # –°–æ–∑–¥–∞—ë–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    modified_file = f"injected_{int(time.time())}.lua"
    with open(modified_file, 'w', encoding='utf-8') as f:
        f.write(injection_code + original_code)
    
    return modified_file

def main():
    if len(sys.argv) < 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 deobfuscate.py script.lua")
        print("   script.lua - –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π LuaObfuscator.com —Ñ–∞–π–ª")
        sys.exit(1)
    
    input_file = sys.argv[1]
    
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    print_header()
    print(f"üìÅ –§–∞–π–ª: {input_file}")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
    print()
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    print("üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª...")
    with open(input_file, 'r', encoding='utf-8') as f:
        code = f.read()
    
    file_size = len(code)
    print(f"üìè –†–∞–∑–º–µ—Ä: {file_size} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
    print("\nüîç –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    analysis = analyze_lua_structure(code)
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö v0-v99: {len(analysis['variables'])}")
    print(f"üîß –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(analysis['functions'])}")
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ hex payload: {len(analysis['hex_payloads'])}")
    print(f"üî§ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ hex: {len(analysis['strings'])}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    if analysis['strings']:
        print("\n‚ú® –ù–ê–ô–î–ï–ù–ù–´–ï –°–¢–†–û–ö–ò:")
        for i, string in enumerate(analysis['strings'][:10], 1):
            print(f"   {i}. '{string}'")
        if len(analysis['strings']) > 10:
            print(f"   ... –∏ –µ—â—ë {len(analysis['strings']) - 10}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    has_v28 = 'v28' in code
    has_v29 = 'v29' in code
    
    print(f"\nüéØ –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print(f"   v28: {'‚úÖ –ù–∞–π–¥–µ–Ω–∞' if has_v28 else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    print(f"   v29: {'‚úÖ –ù–∞–π–¥–µ–Ω–∞' if has_v29 else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
    print("\nüéâ –ü–û–ü–´–¢–ö–ê –†–ï–ö–û–ù–°–¢–†–£–ö–¶–ò–ò:")
    
    if 'print' in analysis['strings']:
        other_strings = [s for s in analysis['strings'] if s != 'print' and len(s) > 0]
        if other_strings:
            reconstructed = f'print("{other_strings[0]}")'
            print(f"üéØ –í–µ—Ä–æ—è—Ç–Ω—ã–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥: {reconstructed}")
        else:
            print("üéØ –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è print, –Ω–æ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
    else:
        print("üìã –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏")
    
    # –°–æ–∑–¥–∞—ë–º injection –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    if has_v28 or has_v29:
        print(f"\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ injection —Å–∫—Ä–∏–ø—Ç–∞...")
        try:
            injected_file = create_injection_script(input_file)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {injected_file}")
            print("\nüìã –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            print(f"   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Lua: sudo apt install lua5.3")
            print(f"   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: lua {injected_file}")
            print(f"   3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è injection: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç
    report_file = f"quick_analysis_{int(time.time())}.txt"
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("ONE-CLICK DEOBFUSCATION REPORT\n")
        f.write("=" * 40 + "\n\n")
        f.write(f"–§–∞–π–ª: {input_file}\n")
        f.write(f"–†–∞–∑–º–µ—Ä: {file_size} —Å–∏–º–≤–æ–ª–æ–≤\n")
        f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
        f.write(f"  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(analysis['variables'])}\n")
        f.write(f"  –§—É–Ω–∫—Ü–∏–π: {len(analysis['functions'])}\n")
        f.write(f"  Hex payload: {len(analysis['hex_payloads'])}\n")
        f.write(f"  –°—Ç—Ä–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {len(analysis['strings'])}\n\n")
        
        f.write("–ù–ê–ô–î–ï–ù–ù–´–ï –°–¢–†–û–ö–ò:\n")
        for i, string in enumerate(analysis['strings'], 1):
            f.write(f"  {i}. '{string}'\n")
        
        if 'print' in analysis['strings']:
            other_strings = [s for s in analysis['strings'] if s != 'print']
            if other_strings:
                f.write(f"\n–í–ï–†–û–Ø–¢–ù–´–ô –ö–û–î:\nprint(\"{other_strings[0]}\")\n")
    
    print(f"\nüìÑ –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_file}")
    
    print("\n" + "üîì" * 50)
    print("‚úÖ ONE-CLICK DEOBFUSCATION –ó–ê–í–ï–†–®–Å–ù!")
    
    if analysis['strings']:
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(analysis['strings'])} —Å—Ç—Ä–æ–∫!")
        if 'print' in analysis['strings']:
            print("üéâ –û–±–Ω–∞—Ä—É–∂–µ–Ω print statement!")
    
    print("üîì" * 50)

if __name__ == "__main__":
    main()